labels = c("BTC", "SP")))%>%
ggplot() +
geom_line(aes(x = as.Date(rep(S$Date[-1], 2)), y = value )) +
facet_wrap(~variable, nrow = 2)
qplot(QQdatBTCSP[,1], apply(y_LD, 1:2,mean )[,1]) + geom_abline(aes(slope = 1, intercept = 0))
qplot(QQdatBTCSP[,2], apply(y_LD, 1:2,mean )[,2]) + geom_abline(aes(slope = 1, intercept = 0))
y_MALD[,,1] %>%as.data.frame()%>%
melt() %>%
mutate(variable = factor(variable, levels = c("V1", "V2"),
labels = c("BTC", "SP")))%>%
ggplot() +
geom_line(aes(x = as.Date(rep(S$Date[-1], 2)), y = value )) +
facet_wrap(~variable, nrow = 2)
lu_fun <- function(y, index,title){
as.data.frame.table(y) %>%
mutate(Date = rep(as.Date(S$Date[-1]), 400)) %>%
rename(variable = Var2,
iteration= Var3,
value = Freq) %>%
select(-c(Var1))  %>%
mutate(variable = factor(variable, levels = c("A", "B"),
labels = c("BTC", "SP"))) %>%
rbind((QQdatBTCSP %>%
melt() %>%
mutate(variable = factor(variable, levels = c("S1", "S2"),
labels = c("BTC", "SP")),
iteration = "truth",
Date = as.Date(rep(S$Date[-1], 2))))) %>%
subset(variable == index& #only look at one index
iteration %in% c("truth", toupper(letters)[16:26])&
Date > "2020-01-01")%>%
ggplot() +
geom_line(aes(x = Date, y = value, colour = value )) +
geom_hline(aes(yintercept = 0))+
facet_wrap(~iteration) +
scale_x_date(date_labels = "%b-%y",date_breaks = "4 month")+
scale_colour_distiller("Effect",palette = "RdYlGn")+
theme(legend.position = "none")+
ggtitle(title)
}
p <- grid.arrange(lu_fun(y=y_MALD, index="BTC",title= "SVMALD, BTC"),
lu_fun(y=y_IND, index="BTC",title= "SVIND, BTC"),
lu_fun(y=y_MVN, index="BTC",title= "SVMVN, BTC"),
lu_fun(y=y_LD, index="BTC",title= "SVLD, BTC")
)
library(ggplot2)
library(grid)
library(gridExtra)
library(MASS)
library(tmvtnorm)
library(ald)
library(ggplot2)
library(dplyr)
library(truncnorm)
library(mvtnorm)
library(tmvtnorm)
library(Rcpp)
library(MCMCpack)
library(quantmod)
library(reshape2)
QQdatBTCSP = data.frame(S1 = 100*(log(S$`BTC-USD.Close`[-1]) - log(S$`BTC-USD.Close`[-(T+1)])),
S2 = 100*(log(S$`GSPC.Close`[-1]) - log(S$`GSPC.Close`[-(T+1)])))
library(reshape2)
QQdatBTCSP %>%
melt() %>%
mutate(variable = factor(variable, levels = c("S1", "S2"),
labels = c("BTC", "SP")))%>%
ggplot() +
geom_line(aes(x = as.Date(rep(S$Date[-1], 2)), y = value )) +
facet_wrap(~variable, nrow = 2)
qplot(QQdatBTCSP[,1], apply(y_LD, 1:2,mean )[,1]) + geom_abline(aes(slope = 1, intercept = 0))
#count number of positive jumps larger  than percent%
njumps_pos <- function(y, percent=.25){
sum(exp(y) <  1 -percent | exp(y ) > 1+percent ) #how many times was y_t/y_{t-1} > 1.25?
}
#count number of JOINT positive jumps where both were larger than percent%
njumps_pos_joint <- function(y1, y2, percent=.25){
sum((exp(y1) <  1 -percent| exp(y1) >  1 +percent) &  (exp(y2) <  1 -percent|exp(y2) >  1 +percent)) #how many times was y_t/y_{t-1} > 1.25?
}
T_stats <- list()
r2 <- 0
for(r in Rsequence){
r2 <- r2 + 1
T_stats[[r2]] <- data.frame(n_BTC = njumps_pos(QQdatBTCSP$S1),
n_SP = njumps_pos(QQdatBTCSP$S2 ),
n_both =  njumps_pos_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_MALD_BTC = njumps_pos(y_MALD[,1,r2]),
n_MALD_SP = njumps_pos(y_MALD[,2,r2] ),
n_MALD_both =  njumps_pos_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_LD_BTC = njumps_pos(y_LD[,1,r2]),
n_LD_SP = njumps_pos(y_LD[,2,r2] ),
n_LD_both = njumps_pos_joint(y_LD[,1,r2],y_LD[,2,r2] ) ,
n_IND_BTC = njumps_pos(y_IND[,1,r2]),
n_IND_SP = njumps_pos(y_IND[,2,r2] ),
n_IND_both =  njumps_pos_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_MVN_BTC = njumps_pos(y_MVN[,1,r2]),
n_MVN_SP = njumps_pos(y_MVN[,2,r2] ),
n_MVN_both =  njumps_pos_joint(y_MVN[,1,r2],y_MVN[,2,r2] ) ,
iteration = r2)
}
#[1]
lnpy_mid_zhatthetahat_LD <- partial_likelihood2(keepsBTCSP_LD, y)
#[1]
DIC7_LD= -4*Elnpy_mid_ztheta_LD + 2*lnpy_mid_zhatthetahat_LD
DIC7_LD
lnpy_mid_zhatthetahat_LD
Elnpy_mid_ztheta_LD
lnpy_mid_zhatthetahat_LD
filepath <- "keeps_060821/" #contains runs with semi-informative priors on jump sizes (N(.5, 1) on eta and sigma_c)
keepsBTCSP <- readRDS(paste0(filepath,"keepsBTCSP.rds")) #MALD jump;s
#SVMALD
lapply(keepsBTCSP[c(4,6:17)], doESS, total = 20000) %>% str()
plot(keepsBTCSP$sigma_c[,1])
plot(keepsBTCSP$sigma_c[,1], type = "l")
plot(keepsBTCSP$sigma_c[,2], type = "l")
plot(keepsBTCSP$rhoc, type = "l")
plot(keepsBTCSP$xi_cw[,1], type = "l")
plot(keepsBTCSP$xi_cw[,2], type = "l")
plot(keepsBTCSP$xi_y1eta, type = "l")
plot(keepsBTCSP$xi_y2eta, type = "l")
plot(keepsBTCSP$xi_y1w, type = "l")
plot(keepsBTCSP$xi_y2w, type = "l")
# DATA AND MCMC SAMPLES ------------
#download full MCMC results (obtained from run_mcmc.R with fix = FALSE)
keepsIND <- readRDS(paste0(filepath,"keepsBTCSP_IND.rds")) #independence
keepsBTCSP_MVN <- readRDS(paste0(filepath,"keepsBTCSP_MVN.rds")) #multivariate normal jumps
keepsBTCSP_LD <-  readRDS(paste0(filepath,"keepsBTCSP_LD")) #laplacian jumps
#SVALD
lapply(keepsIND[c(4,6:17)], doESS, total = total) %>% str()
keepsBTCSP_LD <-  readRDS(paste0(filepath,"keepsBTCSP_LD.rds")) #laplacian jumps
#SVALD
lapply(keepsIND[c(4,6:17)], doESS, total = total) %>% str()
#SVMVN
lapply(keepsBTCSP_MVN[c(4,6:17)], doESS, total = total) %>% str()
#SVLD
lapply(keepsBTCSP_LD[c(4,6:17)], doESS, total = total) %>% str()
plot(keepsBTCSP_LD$xi_y1eta, type = "l")
#SVLD
lapply(keepsBTCSP_LD[c(4,6:17)], doESS, total = total) %>% str()
plot(keepsBTCSP_LD$xi_y2eta, type = "l")
plot(keepsBTCSP_LD$rhoc, type = "l")
plot(keepsBTCSP_LD$sigma_c[,1], type = "l")
plot(keepsBTCSP_LD$sigma_c[,1], type = "l")
plot(keepsBTCSP_LD$sigma_c[,2], type = "l")
plot(keepsBTCSP$sigma_c[,1], type = "l")
plot(keepsBTCSP$sigma_c[,2], type = "l")
plot(keepsBTCSP$rhoc, type = "l")
plot(keepsBTCSP$xi_cw[,1], type = "l")
plot(keepsBTCSP$xi_cw[,2], type = "l")
plot(keepsBTCSP$xi_y1eta, type = "l")
plot(keepsBTCSP$xi_y2eta, type = "l")
plot(keepsBTCSP$xi_y1w, type = "l")
plot(keepsBTCSP$xi_y2w, type = "l")
plot(keepsBTCSP$xi_y2eta, type = "l")
plot(keepsBTCSP$xi_y1eta, keepsBTCSP$xi_y1w)
####################################################
# SVMALD MODEL ---------- LRF RUNS
####################################################
use_starting_values <- TRUE
sourceCpp("pgas_2d.cpp") #C++ updates
# #2-D MODEL MCMCb        cfv09
y <- as.matrix(100*(log(S[-1,c("BTC-USD.Close","GSPC.Close")]) - log(S[-nrow(S),c("BTC-USD.Close","GSPC.Close")])))
yprim <- array(0,dim=dim(y))
#source("starting_values_2d.R") #initialize values (performed within run_mcmc_2d.R)
exp_jumps <- norm_jumps <- ind <- FALSE
source("run_mcmc_2d.R") #R+B iterations of pgas.R and pgas.cpp updates
#SVMALD
lapply(keeps[c(4,6:17)], doESS, total = 20000) %>% str()
plot(keeps$sigma_c[,1], type = "l")
plot(keeps$sigma_c[,2], type = "l")
plot(keeps$rhoc, type = "l")
plot(keeps$xi_cw[,1], type = "l")
plot(keeps$xi_cw[,2], type = "l")
plot(keeps$xi_y1eta, type = "l")
plot(keeps$xi_y2eta, type = "l")
plot(keeps$xi_y1w, type = "l")
plot(keeps$xi_y2w, type = "l")
#SVMALD
lapply(keeps[c(4,6:17)], domean, total = 20000) %>% str()
lapply(keepsBTCSP[c(4,6:17)], domean, total = 20000) %>% str()
keepsBTCSP = keeps
#DIC7 = -4E(ln(p(y|z,theta))) + 2ln(p(y|z-hat, theta-hat))
partial_likelihood1 <-  function(k, y){ #k for keeps, y for correct vector
R <- dim(k$v[complete.cases(k$v[,1,1]),,])[1]
total = 0
for (r in 1:R){
print(r)
total_sub = 0
for (t in 1:nrow(y)){
Sigma11 <- matrix(c(k$v[r,t,1],
k$rho[r,1]*sqrt(prod(k$v[r,t,])),
k$rho[r,1]*sqrt(prod(k$v[r,t,])),
k$v[r,t,2]),nrow=2)
Sigma22 <- matrix(c(k$sigma_v[r,1]^2*k$v[r,t,1],
k$rho[r,2]*prod(k$sigma_v[r,])*sqrt(prod(k$v[r,t,])),
k$rho[r,2]*prod(k$sigma_v[r,])*sqrt(prod(k$v[r,t,])),
k$sigma_v[r,2]^2*k$v[r,t,2]),nrow=2)
Sigma12 <- diag(c(k$rho[r,3:4]*k$sigma_v[r,]*k$v[r,t,]))
eps <- k$v[r,t+1,] - k$theta[r,] - k$phi[r,] * (k$v[r,t,] - k$theta[r,])
total_sub = total_sub + (dmvnorm(y[t,],
k$mu[r,] + k$J[r,t,] + Sigma12 %*% solve(Sigma22) %*% eps,
Sigma11 - Sigma12 %*% solve(Sigma22) %*% Sigma12,
log = TRUE))
}
total = total + total_sub/R #average over R draws
}
return(total)
}
#use plug-in posterior means of z, theta
partial_likelihood2 <-  function(k, y){ #k for keeps, y for correct vector
mu_mean =  apply(k$mu, 2, mean, na.rm=TRUE)
theta_mean = apply(k$theta, 2, mean, na.rm=TRUE)
phi_mean = apply(k$phi, 2, mean, na.rm=TRUE)
sigma_v_mean = apply(k$sigma_v, 2, mean, na.rm=TRUE)
rho_mean = apply(k$rho, 2, mean, na.rm=TRUE)
J_mean = apply(k$J,2:3, mean,na.rm=TRUE)
v_mean = apply(k$v,2:3, mean,na.rm=TRUE)
total_sub = 0
for (t in 1:nrow(y)){
print(t)
Sigma11 <- matrix(c(v_mean[t,1],
rho_mean[1]*sqrt(prod(v_mean[t,])),
rho_mean[1]*sqrt(prod(v_mean[t,])),
v_mean[t,2]),nrow=2)
Sigma22 <- matrix(c(sigma_v_mean[1]^2*v_mean[t,1],
rho_mean[2]*prod(sigma_v_mean)*sqrt(prod(v_mean[t,])),
rho_mean[2]*prod(sigma_v_mean)*sqrt(prod(v_mean[t,])),
sigma_v_mean[2]^2*v_mean[t,2]),nrow=2)
Sigma12 <- diag(c(rho_mean[3:4]*sigma_v_mean*v_mean[t,]))
eps <- v_mean[t+1,] - theta_mean - phi_mean * (v_mean[t,] - theta_mean)
total_sub = total_sub + (dmvnorm(y[t,],
mu_mean + J_mean[t,] + Sigma12 %*% solve(Sigma22) %*% eps,
Sigma11 - Sigma12 %*% solve(Sigma22) %*% Sigma12,
log = TRUE))
}
return(total_sub)
}
#----SVMALD
#E(ln(p(y|z,theta)))
Elnpy_mid_ztheta_MALD <- partial_likelihood1(keepsBTCSP, y)
#SVMALD
lapply(keeps[c(4,6:17)], domean, total = 20000) %>% str()
#SVMALD
lapply(keeps[c(4,6:17)], doESS, total = 20000) %>% str()
lapply(keepsBTCSP[c(4,6:17)], domean, total = 20000) %>% str()
#[1]
lnpy_mid_zhatthetahat_MALD <- partial_likelihood2(keepsBTCSP, y)
#[1]
DIC7_MALD = -4*Elnpy_mid_ztheta_MALD + 2*lnpy_mid_zhatthetahat_MALD
DIC7_MALD
acs <- read.csv(file.choose())
str(acs)
library(ggplot2)
library(dplyr)
library(DT)#datatable
library(rmapshaper)
library(leaflet)
library(htmltools)
library(tigris)
library(totalcensus)
#for merging
acs$GEOID <- as.character(paste0(acs$GEOID, substr(acs$X, 13, 13)))
#this is block groups w/in tracts
ia_shp <- block_groups(state = "IA")  #TIME INTENSIVE 1st run (so each dashboard run)
county_list <-unique(counties("Iowa")$NAME)#TIME INTENSIVE 1st run (so each dashboard run)
county_list <- county_list[order(county_list)]
all_counties <-  block_groups(state = 'IA', county = county_list) #also time intensive...
ia_shp_join <- left_join(ia_shp, acs, by="GEOID" ) %>%
rmapshaper::ms_simplify( keep = 0.01, keep_shapes = TRUE)
leaflet(ia_shp_join,height=500, width=1000) %>%
addTiles() %>%
#setView(lng = 0, lat = 30, zoom = 2) %>%
addPolygons(
fillColor = ~ pal_bin(lasso_bin_pred),
color = "white",
stroke=FALSE,
fillOpacity = 0.6,
label = ~labels,
highlight = highlightOptions(
color = "black",
bringToFront = TRUE
)
)%>%
leaflet::addLegend(
pal = pal_bin, values = ~lasso_bin_pred,
opacity = 0.7, title = "Proportion of\nFood Insecure\nHouseholds",
position = "topright"
)
leaflet(ia_shp_join,height=500, width=1000) %>%
addTiles() %>%
#setView(lng = 0, lat = 30, zoom = 2) %>%
addPolygons(
fillColor = ~ elderly, #COLORING BY ELDERLY HERE
color = "white",
stroke=FALSE,
fillOpacity = 0.6,
highlight = highlightOptions(
color = "black",
bringToFront = TRUE
)
)%>%
leaflet::addLegend(
pal = pal_bin, values = ~lasso_bin_pred,
opacity = 0.7, title = "Proportion of\nFood Insecure\nHouseholds",
position = "topright"
)
leaflet(ia_shp_join,height=500, width=1000) %>%
addTiles() %>%
#setView(lng = 0, lat = 30, zoom = 2) %>%
addPolygons(
fillColor = ~ elderly, #COLORING BY ELDERLY HERE
color = "white",
stroke=FALSE,
fillOpacity = 0.6,
highlight = highlightOptions(
color = "black",
bringToFront = TRUE
)
)%>%
leaflet::addLegend(
opacity = 0.7, title = "Proportion of\nFood Insecure\nHouseholds",
position = "topright"
)
?addPolygons
#color palette for elderly
pal_bin <- colorBin(
palette = "YlOrRd", domain = ia_shp_join$elderly,
bins = seq(0, max(ia_shp_join$elderly, na.rm = TRUE) + .01, by = .05)
)
leaflet(ia_shp_join,height=500, width=1000) %>%
addTiles() %>%
#setView(lng = 0, lat = 30, zoom = 2) %>%
addPolygons(
fillColor = ~ pal_bin(elderly), #COLORING BY ELDERLY HERE
color = "white",
stroke=FALSE,
fillOpacity = 0.6,
highlight = highlightOptions(
color = "black",
bringToFront = TRUE
)
)%>%
leaflet::addLegend(
opacity = 0.7, title = "Proportion of\nFood Insecure\nHouseholds",
position = "topright"
)
leaflet(ia_shp_join,height=500, width=1000) %>%
addTiles() %>%
#setView(lng = 0, lat = 30, zoom = 2) %>%
addPolygons(
fillColor = ~ pal_bin(elderly), #COLORING BY ELDERLY HERE
color = "white",
stroke=FALSE,
fillOpacity = 0.6,
highlight = highlightOptions(
color = "black",
bringToFront = TRUE
)
)%>%
leaflet::addLegend(
pal = pal_bin, values = ~elderly,
opacity = 0.7, title = "Proportion of\nFood Insecure\nHouseholds",
position = "topright"
)
summary(acs)
?seq
#color palette for elderly
pal_bin <- colorBin(
palette = "YlOrRd", domain = ia_shp_join$elderly,
bins = seq(0, max(ia_shp_join$elderly, na.rm = TRUE), length.out = 9)
)
leaflet(ia_shp_join,height=500, width=1000) %>%
addTiles() %>%
#setView(lng = 0, lat = 30, zoom = 2) %>%
addPolygons(
fillColor = ~ pal_bin(elderly), #COLORING BY ELDERLY HERE
color = "white",
stroke=FALSE,
fillOpacity = 0.6,
highlight = highlightOptions(
color = "black",
bringToFront = TRUE
)
)%>%
leaflet::addLegend(
pal = pal_bin, values = ~elderly,
opacity = 0.7, title = "Iowa Elderly",
position = "topright"
)
?renderLeaflet
leaflet(ia_shp_join,height=500, width=1000) %>%
addTiles() %>%
#setView(lng = 0, lat = 30, zoom = 2) %>%
addPolygons(
fillColor = ~ pal_bin(elderly), #COLORING BY ELDERLY HERE
color = "white",
stroke=FALSE,
fillOpacity = 0.6,
highlight = highlightOptions(
color = "black",
bringToFront = TRUE
)
)%>%
leaflet::addLegend(
pal = pal_bin, values = ~elderly,
opacity = 0.7, title = "Iowa Elderly",
position = "topright"
)
leaflet(ia_shp_join,height=500, width=1000) %>%
addTiles() %>%
#setView(lng = 0, lat = 30, zoom = 2) %>%
addPolygons(
fillColor = ~ pal_bin(elderly), #COLORING BY ELDERLY HERE
color = "white",
stroke=FALSE,
fillOpacity = 0.6,
highlight = highlightOptions(
color = "black",
bringToFront = TRUE
)
)%>%
leaflet::addLegend(
pal = pal_bin, values = ~elderly,
opacity = 0.7, title = "Iowa Elderly",
position = "bottomright"
)
cps <- read.csv(file.choose())
summary(cps)
saveRDS(keepsBTCSP,paste0("keeps_061021/keepsBTCSP.rds"))
filepath <- "keeps_060821/"
filepath0 <- "/Users/000766412/OneDrive - Drake University/Documents/Research/Asymmetric Laplace Jumps/keeps/"
filepath2 <- "keeps061021/"
keepsBTCSP0 <- readRDS(paste0(filepath0,"keepsBTCSP.rds")) #early run
keepsBTCSP <- readRDS(paste0(filepath,"keepsBTCSP.rds")) #06/08 run
keepsBTCSP2 <- readRDS(paste0(filepath2,"keepsBTCSP.rds")) #06/10 run
keepsBTCSP$delta %>%
melt() %>%
mutate(value = factor(value, levels = c(0:3),
labels = c("BTC jump", "S&P jump", "Joint jump", "No jump"))) %>%
ggplot() +
geom_bar(aes(x = Var2, fill = value, colour = value), position = "fill") +
scale_fill_brewer("Type",type = "qual") +labs(x = "Time", y = "Proportion")
keepsBTCSP$delta %>%
melt() %>%
mutate(value = factor(value, levels = c(0:3),
labels = c("BTC jump", "S&P jump", "Joint jump", "No jump"))) %>%
ggplot() +
geom_bar(aes(x = Var2, fill = value, colour = value), position = "fill") +
scale_fill_brewer("Type",type = "qual") +
scale_colour_brewer("Type",type = "qual") +
labs(x = "Time", y = "Proportion")
dim(keepsBTCSP$delta)
str(keepsBTCSP$delta %>%
melt())
summary(keepsBTCSP$delta %>%
melt())
summary(QQdatBTCSP)
summary(S)
seq.Date(from = "2014-09-17", to = "2020-09-29")
date <- seq.Date(from = as.Date("2014-09-17"), to = as.Date("2020-09-29"))
date <- seq.Date(from = as.Date("2014-09-17"), to = as.Date("2020-09-29"), by = "day")
length(date)
getSymbols("BTC-USD",from = "2014-09-15",to = "2020-09-30")
BTC <- as.data.frame(`BTC-USD`)
BTC$Date <- seq(as.Date("2014-09-17"),as.Date("2020-09-30"),by="days")
length(BTC$Date)
BTC$`BTC-USD.Close`[BTC$Date=="2020-04-17"] <- 7096.18
getSymbols("^GSPC",from = "2014-09-15",to = "2020-09-30")
SP500 <- as.data.frame(`GSPC`)
SP500$Date <- as.Date(rownames(SP500))
S <- merge(BTC,SP500)
length(S$Date)
keepsBTCSP$delta %>%
melt() %>%
mutate(value = factor(value, levels = c(0:3),
labels = c("BTC jump", "S&P jump", "Joint jump", "No jump")),
date = rep(S$Date[-1], each = 20000)) %>%
ggplot() +
geom_bar(aes(x = Var2, fill = value, colour = value), position = "fill") +
scale_fill_brewer("Type",type = "qual") +
scale_colour_brewer("Type",type = "qual") +
labs(x = "Time", y = "Proportion")
keepsBTCSP$rho %>%
as.data.frame() %>%
melt() %>%
#mutate(variable = factor(variable, levels = c("V1", "V2"),labels = c("BTC", "S&P")))%>%
ggplot() +
geom_histogram(aes(x = value)) +
facet_grid(~variable) +
ggtitle("sigma_c (scale of MALD)")
keepsBTCSP$rho %>%
as.data.frame() %>%
melt() %>%
#mutate(variable = factor(variable, levels = c("V1", "V2"),labels = c("BTC", "S&P")))%>%
ggplot() +
geom_histogram(aes(x = value)) +
facet_grid(~variable) +
ggtitle("rho (scale of MALD)")
keepsBTCSP_MVN$xi_cw %>%
as.data.frame() %>%
melt() %>%
mutate(variable = factor(variable, levels = c("V1", "V2"),labels = c("BTC", "S&P")))%>%
ggplot() +
geom_histogram(aes(x = value)) +
facet_grid(~variable)+
ggtitle("w_c (location of MALD)")
lapply(keepsBTCSP_MVN[c(4,6:17)], domean, total = 20000) %>% str() #fulop priors 2
lapply(keepsBTCSP[c(4,6:17)], domean, total = 20000) %>% str()
lapply(keepsBTCSP_LD[c(4,6:17)], domean, total = 20000) %>% str()
lapply(keepsBTCSP_IND[c(4,6:17)], domean, total = 20000) %>% str()
lapply(keepsIND[c(4,6:17)], domean, total = 20000) %>% str()
plot(keepsIND$rho[,1])
