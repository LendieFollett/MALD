QQdatBTCSP %>%
melt() %>%
mutate(variable = factor(variable, levels = c("S1", "S2"),
labels = c("BTC", "SP")))%>%
ggplot() +
geom_line(aes(x = as.Date(rep(S$Date[-1], 2)), y = value )) +
facet_wrap(~variable, nrow = 2)
qplot(QQdatBTCSP[,1], apply(y_LD, 1:2,mean )[,1]) + geom_abline(aes(slope = 1, intercept = 0))
qplot(QQdatBTCSP[,2], apply(y_LD, 1:2,mean )[,2]) + geom_abline(aes(slope = 1, intercept = 0))
y_MALD[,,1] %>%as.data.frame()%>%
melt() %>%
mutate(variable = factor(variable, levels = c("V1", "V2"),
labels = c("BTC", "SP")))%>%
ggplot() +
geom_line(aes(x = as.Date(rep(S$Date[-1], 2)), y = value )) +
facet_wrap(~variable, nrow = 2)
lu_fun <- function(y, index,title){
as.data.frame.table(y) %>%
mutate(Date = rep(as.Date(S$Date[-1]), 400)) %>%
rename(variable = Var2,
iteration= Var3,
value = Freq) %>%
select(-c(Var1))  %>%
mutate(variable = factor(variable, levels = c("A", "B"),
labels = c("BTC", "SP"))) %>%
rbind((QQdatBTCSP %>%
melt() %>%
mutate(variable = factor(variable, levels = c("S1", "S2"),
labels = c("BTC", "SP")),
iteration = "truth",
Date = as.Date(rep(S$Date[-1], 2))))) %>%
subset(variable == index& #only look at one index
iteration %in% c("truth", toupper(letters)[16:26])&
Date > "2020-01-01")%>%
ggplot() +
geom_line(aes(x = Date, y = value, colour = value )) +
geom_hline(aes(yintercept = 0))+
facet_wrap(~iteration) +
scale_x_date(date_labels = "%b-%y",date_breaks = "4 month")+
scale_colour_distiller("Effect",palette = "RdYlGn")+
theme(legend.position = "none")+
ggtitle(title)
}
p <- grid.arrange(lu_fun(y=y_MALD, index="BTC",title= "SVMALD, BTC"),
lu_fun(y=y_IND, index="BTC",title= "SVIND, BTC"),
lu_fun(y=y_MVN, index="BTC",title= "SVMVN, BTC"),
lu_fun(y=y_LD, index="BTC",title= "SVLD, BTC")
)
ggsave("lineup_BTC.pdf",p, width = 12, height = 12)
p2 <- grid.arrange(lu_fun(y=y_MALD, index="SP",title= "SVMALD, SP"),
lu_fun(y=y_IND, index="SP",title= "SVIND, SP"),
lu_fun(y=y_MVN, index="SP",title= "SVMVN, SP"),
lu_fun(y=y_LD, index="SP",title= "SVLD, SP")
)
ggsave("lineup_SP.pdf",p2, width = 12, height = 12)
#count number of positive jumps larger  than percent%
njumps_pos <- function(y, percent=.25){
sum(exp(y) <  1 -percent | exp(y ) > 1+percent ) #how many times was y_t/y_{t-1} > 1.25?
}
#count number of JOINT positive jumps where both were larger than percent%
njumps_pos_joint <- function(y1, y2, percent=.25){
sum((exp(y1) <  1 -percent| exp(y1) >  1 +percent) &  (exp(y2) <  1 -percent|exp(y2) >  1 +percent)) #how many times was y_t/y_{t-1} > 1.25?
}
T_stats <- list()
r2 <- 0
for(r in Rsequence){
r2 <- r2 + 1
T_stats[[r2]] <- data.frame(n_BTC = njumps_pos(QQdatBTCSP$S1),
n_SP = njumps_pos(QQdatBTCSP$S2 ),
n_both =  njumps_pos_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_MALD_BTC = njumps_pos(y_MALD[,1,r2]),
n_MALD_SP = njumps_pos(y_MALD[,2,r2] ),
n_MALD_both =  njumps_pos_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_LD_BTC = njumps_pos(y_LD[,1,r2]),
n_LD_SP = njumps_pos(y_LD[,2,r2] ),
n_LD_both = njumps_pos_joint(y_LD[,1,r2],y_LD[,2,r2] ) ,
n_IND_BTC = njumps_pos(y_IND[,1,r2]),
n_IND_SP = njumps_pos(y_IND[,2,r2] ),
n_IND_both =  njumps_pos_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_MVN_BTC = njumps_pos(y_MVN[,1,r2]),
n_MVN_SP = njumps_pos(y_MVN[,2,r2] ),
n_MVN_both =  njumps_pos_joint(y_MVN[,1,r2],y_MVN[,2,r2] ) ,
iteration = r2)
}
#visualize distribution of T() from simulated datasets vs what is observed in actual data
do.call(rbind,T_stats) %>%
select(c( "n_MALD_BTC", "n_MVN_BTC","n_IND_BTC", "n_LD_BTC", "iteration","n_BTC"))%>%
melt(id.var = c("iteration", "n_BTC")) %>%
ggplot() +
geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_BTC)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of BTC jumps greater than 25%")
#ppp
(do.call(rbind,T_stats)$n_MALD_BTC > do.call(rbind,T_stats)$n_BTC) %>%mean
(do.call(rbind,T_stats)$n_MVN_BTC > do.call(rbind,T_stats)$n_BTC) %>%mean
do.call(rbind,T_stats) %>%
select(c( "n_MALD_SP", "n_MVN_SP", "n_IND_SP", "n_LD_SP", "iteration","n_SP"))%>%
melt(id.var = c("iteration", "n_SP")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_SP)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of S&P jumps greater than 25%")
#ppp
(do.call(rbind,T_stats)$n_MALD_SP > do.call(rbind,T_stats)$n_SP) %>%mean
(do.call(rbind,T_stats)$n_MVN_SP > do.call(rbind,T_stats)$n_SP) %>%mean
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both", "n_MVN_both", "n_LD_both", "n_IND_both", "iteration","n_both"))%>%
melt(id.var = c("iteration", "n_both")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 25%")
#count number of positive jumps larger  than percent%
njumps_pos <- function(y, percent=.5){
sum(exp(y) <  1 -percent | exp(y ) > 1+percent ) #how many times was y_t/y_{t-1} > 1.25?
}
#count number of JOINT positive jumps where both were larger than percent%
njumps_pos_joint <- function(y1, y2, percent=.5){
sum((exp(y1) <  1 -percent| exp(y1) >  1 +percent) &  (exp(y2) <  1 -percent|exp(y2) >  1 +percent)) #how many times was y_t/y_{t-1} > 1.25?
}
T_stats <- list()
r2 <- 0
for(r in Rsequence){
r2 <- r2 + 1
T_stats[[r2]] <- data.frame(n_BTC = njumps_pos(QQdatBTCSP$S1),
n_SP = njumps_pos(QQdatBTCSP$S2 ),
n_both =  njumps_pos_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_MALD_BTC = njumps_pos(y_MALD[,1,r2]),
n_MALD_SP = njumps_pos(y_MALD[,2,r2] ),
n_MALD_both =  njumps_pos_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_LD_BTC = njumps_pos(y_LD[,1,r2]),
n_LD_SP = njumps_pos(y_LD[,2,r2] ),
n_LD_both = njumps_pos_joint(y_LD[,1,r2],y_LD[,2,r2] ) ,
n_IND_BTC = njumps_pos(y_IND[,1,r2]),
n_IND_SP = njumps_pos(y_IND[,2,r2] ),
n_IND_both =  njumps_pos_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_MVN_BTC = njumps_pos(y_MVN[,1,r2]),
n_MVN_SP = njumps_pos(y_MVN[,2,r2] ),
n_MVN_both =  njumps_pos_joint(y_MVN[,1,r2],y_MVN[,2,r2] ) ,
iteration = r2)
}
#visualize distribution of T() from simulated datasets vs what is observed in actual data
do.call(rbind,T_stats) %>%
select(c( "n_MALD_BTC", "n_MVN_BTC","n_IND_BTC", "n_LD_BTC", "iteration","n_BTC"))%>%
melt(id.var = c("iteration", "n_BTC")) %>%
ggplot() +
geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_BTC)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of BTC jumps greater than 25%")
#visualize distribution of T() from simulated datasets vs what is observed in actual data
do.call(rbind,T_stats) %>%
select(c( "n_MALD_BTC", "n_MVN_BTC","n_IND_BTC", "n_LD_BTC", "iteration","n_BTC"))%>%
melt(id.var = c("iteration", "n_BTC")) %>%
ggplot() +
geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_BTC)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of BTC jumps greater than 50%")
do.call(rbind,T_stats) %>%
select(c( "n_MALD_SP", "n_MVN_SP", "n_IND_SP", "n_LD_SP", "iteration","n_SP"))%>%
melt(id.var = c("iteration", "n_SP")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_SP)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of S&P jumps greater than 25%")
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both", "n_MVN_both", "n_LD_both", "n_IND_both", "iteration","n_both"))%>%
melt(id.var = c("iteration", "n_both")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
#count number of JOINT positive jumps where both were larger than percent%
njumps_joint <- function(y1, y2, percent=.5){
sum((exp(y1) <  1 -percent| exp(y1) >  1 +percent) &  (exp(y2) <  1 -percent|exp(y2) >  1 +percent)) #how many times was y_t/y_{t-1} > 1.25?
}
#count number of JOINT positive jumps where both were larger than percent%
njumps_pos_joint <- function(y1, y2, percent=.5){
sum((exp(y1) >  1 +percent) &  (exp(y2) >  1 +percent)) #how many times was y_t/y_{t-1} > 1.25?
}
#count number of JOINT positive jumps where both were larger than percent%
njumps_neg_joint <- function(y1, y2, percent=.5){
sum((exp(y1) <  1 -percent) &  (exp(y2) <  1 -percent)) #how many times was y_t/y_{t-1} > 1.25?
}
T_stats <- list()
r2 <- 0
for(r in Rsequence){
r2 <- r2 + 1
T_stats[[r2]] <- data.frame(n_BTC = njumps_pos(QQdatBTCSP$S1),
n_SP = njumps_pos(QQdatBTCSP$S2 ),
n_both =  njumps_pos_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_MALD_BTC = njumps_pos(y_MALD[,1,r2]),
n_MALD_SP = njumps_pos(y_MALD[,2,r2] ),
n_MALD_both =  njumps_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_MALD_both_pos =  njumps_pos_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_MALD_both_neg =  njumps_neg_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_LD_BTC = njumps_pos(y_LD[,1,r2]),
n_LD_SP = njumps_pos(y_LD[,2,r2] ),
n_LD_both =  njumps_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_LD_both_pos =  njumps_pos_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_LD_both_neg =  njumps_neg_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_IND_BTC = njumps_pos(y_IND[,1,r2]),
n_IND_SP = njumps_pos(y_IND[,2,r2] ),
n_IND_both =  njumps_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_IND_both_pos =  njumps_pos_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_IND_both_neg =  njumps_neg_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_MVN_BTC = njumps_pos(y_MVN[,1,r2]),
n_MVN_SP = njumps_pos(y_MVN[,2,r2] ),
n_MVN_both =  njumps_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
n_MVN_both_pos =  njumps_pos_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
n_MVN_both_neg =  njumps_neg_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
iteration = r2)
}
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both", "n_MVN_both", "n_LD_both", "n_IND_both", "iteration","n_both"))%>%
melt(id.var = c("iteration", "n_both")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
T_stats <- list()
r2 <- 0
for(r in Rsequence){
r2 <- r2 + 1
T_stats[[r2]] <- data.frame(n_BTC = njumps_pos(QQdatBTCSP$S1),
n_SP = njumps_pos(QQdatBTCSP$S2 ),
n_both =  njumps_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_both_pos =  njumps_pos_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_both_neg =  njumps_pos_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_MALD_BTC = njumps_pos(y_MALD[,1,r2]),
n_MALD_SP = njumps_pos(y_MALD[,2,r2] ),
n_MALD_both =  njumps_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_MALD_both_pos =  njumps_pos_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_MALD_both_neg =  njumps_neg_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_LD_BTC = njumps_pos(y_LD[,1,r2]),
n_LD_SP = njumps_pos(y_LD[,2,r2] ),
n_LD_both =  njumps_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_LD_both_pos =  njumps_pos_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_LD_both_neg =  njumps_neg_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_IND_BTC = njumps_pos(y_IND[,1,r2]),
n_IND_SP = njumps_pos(y_IND[,2,r2] ),
n_IND_both =  njumps_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_IND_both_pos =  njumps_pos_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_IND_both_neg =  njumps_neg_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_MVN_BTC = njumps_pos(y_MVN[,1,r2]),
n_MVN_SP = njumps_pos(y_MVN[,2,r2] ),
n_MVN_both =  njumps_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
n_MVN_both_pos =  njumps_pos_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
n_MVN_both_neg =  njumps_neg_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
iteration = r2)
}
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both", "n_MVN_both", "n_LD_both", "n_IND_both", "iteration","n_both"))%>%
melt(id.var = c("iteration", "n_both")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_pos", "n_MVN_both_pos", "n_LD_both_pos", "n_IND_both_pos", "iteration","n_both_pos"))%>%
melt(id.var = c("iteration", "n_both")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_pos", "n_MVN_both_pos", "n_LD_both_pos", "n_IND_both_pos", "iteration","n_both_pos"))%>%
melt(id.var = c("iteration", "n_both_pos")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_pos", "n_MVN_both_pos", "n_LD_both_pos", "n_IND_both_pos", "iteration","n_both_pos"))%>%
melt(id.var = c("iteration", "n_both_pos")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both_pos)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both", "n_MVN_both", "n_LD_both", "n_IND_both", "iteration","n_both"))%>%
melt(id.var = c("iteration", "n_both")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_pos", "n_MVN_both_pos", "n_LD_both_pos", "n_IND_both_pos", "iteration","n_both_pos"))%>%
melt(id.var = c("iteration", "n_both_pos")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both_pos)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_neg", "n_MVN_both_neg", "n_LD_both_neg", "n_IND_both_neg", "iteration","n_both_neg"))%>%
melt(id.var = c("iteration", "n_both_neg")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both_neg)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
T_stats <- list()
r2 <- 0
for(r in Rsequence){
r2 <- r2 + 1
T_stats[[r2]] <- data.frame(n_BTC = njumps_pos(QQdatBTCSP$S1),
n_SP = njumps_pos(QQdatBTCSP$S2 ),
n_both =  njumps_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_both_pos =  njumps_pos_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_both_neg =  njumps_neg_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_MALD_BTC = njumps_pos(y_MALD[,1,r2]),
n_MALD_SP = njumps_pos(y_MALD[,2,r2] ),
n_MALD_both =  njumps_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_MALD_both_pos =  njumps_pos_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_MALD_both_neg =  njumps_neg_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_LD_BTC = njumps_pos(y_LD[,1,r2]),
n_LD_SP = njumps_pos(y_LD[,2,r2] ),
n_LD_both =  njumps_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_LD_both_pos =  njumps_pos_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_LD_both_neg =  njumps_neg_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_IND_BTC = njumps_pos(y_IND[,1,r2]),
n_IND_SP = njumps_pos(y_IND[,2,r2] ),
n_IND_both =  njumps_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_IND_both_pos =  njumps_pos_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_IND_both_neg =  njumps_neg_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_MVN_BTC = njumps_pos(y_MVN[,1,r2]),
n_MVN_SP = njumps_pos(y_MVN[,2,r2] ),
n_MVN_both =  njumps_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
n_MVN_both_pos =  njumps_pos_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
n_MVN_both_neg =  njumps_neg_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
iteration = r2)
}
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both", "n_MVN_both", "n_LD_both", "n_IND_both", "iteration","n_both"))%>%
melt(id.var = c("iteration", "n_both")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50% (+ or -)")
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_pos", "n_MVN_both_pos", "n_LD_both_pos", "n_IND_both_pos", "iteration","n_both_pos"))%>%
melt(id.var = c("iteration", "n_both_pos")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both_pos)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_neg", "n_MVN_both_neg", "n_LD_both_neg", "n_IND_both_neg", "iteration","n_both_neg"))%>%
melt(id.var = c("iteration", "n_both_neg")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both_neg)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both less than 50%")
p1 <- do.call(rbind,T_stats) %>%
select(c( "n_MALD_both", "n_MVN_both", "n_LD_both", "n_IND_both", "iteration","n_both"))%>%
melt(id.var = c("iteration", "n_both")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50% (+ or -)")
p2 <- do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_pos", "n_MVN_both_pos", "n_LD_both_pos", "n_IND_both_pos", "iteration","n_both_pos"))%>%
melt(id.var = c("iteration", "n_both_pos")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both_pos)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
p3 <- do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_neg", "n_MVN_both_neg", "n_LD_both_neg", "n_IND_both_neg", "iteration","n_both_neg"))%>%
melt(id.var = c("iteration", "n_both_neg")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both_neg)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both less than 50%")
grid.arrange(p2, p3, p1, nrow = 1)
grid.arrange(p2, p3, p1, nrow = 3)
p4 <- grid.arrange(p2, p3, p1, nrow = 3)
ggsave("ppp_joint_jumps.pdf", p4, width = 8, height = 12)
#count number of positive jumps larger  than percent%
njumps_pos <- function(y, percent=.75){
sum(exp(y) <  1 -percent | exp(y ) > 1+percent ) #how many times was y_t/y_{t-1} > 1.25?
}
#count number of JOINT positive jumps where both were larger than percent%
njumps_joint <- function(y1, y2, percent=.75){
sum((exp(y1) <  1 -percent| exp(y1) >  1 +percent) &  (exp(y2) <  1 -percent|exp(y2) >  1 +percent)) #how many times was y_t/y_{t-1} > 1.25?
}
#count number of JOINT positive jumps where both were larger than percent%
njumps_pos_joint <- function(y1, y2, percent=.75){
sum((exp(y1) >  1 +percent) &  (exp(y2) >  1 +percent)) #how many times was y_t/y_{t-1} > 1.25?
}
#count number of JOINT positive jumps where both were larger than percent%
njumps_neg_joint <- function(y1, y2, percent=.75){
sum((exp(y1) <  1 -percent) &  (exp(y2) <  1 -percent)) #how many times was y_t/y_{t-1} > 1.25?
}
T_stats <- list()
r2 <- 0
for(r in Rsequence){
r2 <- r2 + 1
T_stats[[r2]] <- data.frame(n_BTC = njumps_pos(QQdatBTCSP$S1),
n_SP = njumps_pos(QQdatBTCSP$S2 ),
n_both =  njumps_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_both_pos =  njumps_pos_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_both_neg =  njumps_neg_joint(QQdatBTCSP$S1,QQdatBTCSP$S2 ),
n_MALD_BTC = njumps_pos(y_MALD[,1,r2]),
n_MALD_SP = njumps_pos(y_MALD[,2,r2] ),
n_MALD_both =  njumps_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_MALD_both_pos =  njumps_pos_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_MALD_both_neg =  njumps_neg_joint(y_MALD[,1,r2],y_MALD[,2,r2] ),
n_LD_BTC = njumps_pos(y_LD[,1,r2]),
n_LD_SP = njumps_pos(y_LD[,2,r2] ),
n_LD_both =  njumps_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_LD_both_pos =  njumps_pos_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_LD_both_neg =  njumps_neg_joint(y_LD[,1,r2],y_LD[,2,r2] ),
n_IND_BTC = njumps_pos(y_IND[,1,r2]),
n_IND_SP = njumps_pos(y_IND[,2,r2] ),
n_IND_both =  njumps_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_IND_both_pos =  njumps_pos_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_IND_both_neg =  njumps_neg_joint(y_IND[,1,r2],y_IND[,2,r2] ),
n_MVN_BTC = njumps_pos(y_MVN[,1,r2]),
n_MVN_SP = njumps_pos(y_MVN[,2,r2] ),
n_MVN_both =  njumps_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
n_MVN_both_pos =  njumps_pos_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
n_MVN_both_neg =  njumps_neg_joint(y_MVN[,1,r2],y_MVN[,2,r2] ),
iteration = r2)
}
#visualize distribution of T() from simulated datasets vs what is observed in actual data
do.call(rbind,T_stats) %>%
select(c( "n_MALD_BTC", "n_MVN_BTC","n_IND_BTC", "n_LD_BTC", "iteration","n_BTC"))%>%
melt(id.var = c("iteration", "n_BTC")) %>%
ggplot() +
geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_BTC)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of BTC jumps greater than 50%")
#ppp
(do.call(rbind,T_stats)$n_MALD_BTC > do.call(rbind,T_stats)$n_BTC) %>%mean
(do.call(rbind,T_stats)$n_MVN_BTC > do.call(rbind,T_stats)$n_BTC) %>%mean
do.call(rbind,T_stats) %>%
select(c( "n_MALD_SP", "n_MVN_SP", "n_IND_SP", "n_LD_SP", "iteration","n_SP"))%>%
melt(id.var = c("iteration", "n_SP")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_SP)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of S&P jumps greater than 50%")
#ppp
(do.call(rbind,T_stats)$n_MALD_SP > do.call(rbind,T_stats)$n_SP) %>%mean
(do.call(rbind,T_stats)$n_MVN_SP > do.call(rbind,T_stats)$n_SP) %>%mean
p1 <- do.call(rbind,T_stats) %>%
select(c( "n_MALD_both", "n_MVN_both", "n_LD_both", "n_IND_both", "iteration","n_both"))%>%
melt(id.var = c("iteration", "n_both")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50% (+ or -)")
p2 <- do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_pos", "n_MVN_both_pos", "n_LD_both_pos", "n_IND_both_pos", "iteration","n_both_pos"))%>%
melt(id.var = c("iteration", "n_both_pos")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both_pos)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both greater than 50%")
p3 <- do.call(rbind,T_stats) %>%
select(c( "n_MALD_both_neg", "n_MVN_both_neg", "n_LD_both_neg", "n_IND_both_neg", "iteration","n_both_neg"))%>%
melt(id.var = c("iteration", "n_both_neg")) %>%
ggplot() + geom_density(aes(x = value, fill = variable),  alpha = I(.3)) +
geom_vline(aes(xintercept = n_both_neg)) +
labs(x = "Simulated Counts", y = "Density")+
ggtitle("# of joint jumps where both less than 50%")
p4 <- grid.arrange(p2, p3, p1, nrow = 3)
keepsBTCSP$sigma_c %>%
as.data.frame() %>%
melt() %>%
mutate(variable = factor(variable, levels = c("V1", "V2"),labels = c("BTC", "S&P")))%>%
ggplot() +
geom_histogram(aes(x = value)) +
facet_grid(~variable) +
ggtitle("sigma_c (scale of MALD)")
keepsBTCSP <- readRDS(paste0(filepath,"keepsBTCSP.rds")) #06/08 run
keepsBTCSP$sigma_c %>%
as.data.frame() %>%
melt() %>%
mutate(variable = factor(variable, levels = c("V1", "V2"),labels = c("BTC", "S&P")))%>%
ggplot() +
geom_histogram(aes(x = value)) +
facet_grid(~variable) +
ggtitle("sigma_c (scale of MALD)")
keepsBTCSP$rho %>%
as.data.frame() %>%
melt() %>%
mutate(variable = factor(variable, levels = c("V1", "V2"),labels = c("BTC", "S&P")))%>%
ggplot() +
geom_histogram(aes(x = value)) +
facet_grid(~variable) +
ggtitle("sigma_c (scale of MALD)")
keepsBTCSP$rho %>%
as.data.frame() %>%
melt() %>%
ggplot() +
geom_histogram(aes(x = value)) +
facet_grid(~variable) +
ggtitle("sigma_c (scale of MALD)")
getwd()
tinytex::parse_install("/Users/000766412/OneDrive - Drake University/Documents/Professional/lfollett_cv.log")
tinytex::parse_install("/Users/000766412/OneDrive - Drake University/Documents/Professional/try.log")
tinytex::parse_install("/Users/000766412/OneDrive - Drake University/Documents/Professional/try.log")
View(p2)
View(keepsBTCSP_MVN)
seq(1, 5, by = 1)
31500 + 2000 + 5000
31500 + 2000 + 5000+42000
getwd()
