set.seed(t + 4922035+ sim)
delta <- sample(c(0:3),prob=apply(keeps$lambda, 2, mean), 1)
set.seed(15866245 + t + sim)
if(model == "MVN"){
B <- 1
}else{
B <- rexp(1)
}
Sigma <- matrix(c(mean(keeps$sigma_c[,1])^2,
mean(keeps$rhoc)*mean(keeps$sigma_c[,1])*mean(keeps$sigma_c[,2]),
mean(keeps$rhoc)*mean(keeps$sigma_c[,1])*mean(keeps$sigma_c[,2]),
mean(keeps$sigma_c[,2]^2)),
nrow=2)
# xi_c <- apply(keeps$xi_cw, 2, mean)*B+
#   sqrt(B)*rtmvnorm(n = 1, mean = c(0,0), sigma = Sigma)
#
# if(model == "MVN"){
#   B <- 1
# }else{
#   B <- rexp(1)
# }
# xi_y1 <- mean(keeps$xi_y1w)*B + sqrt(B)*rnorm(1,0,mean(keeps$xi_y1eta)) #SHOULD THIS BE SQRT(ETA)?
# if(model == "MVN"){
#   B <- 1
# }else{
#   B <- rexp(1)
# }
# xi_y2 <- mean(keeps$xi_y2w)*B + sqrt(B)*rnorm(1,0,mean(keeps$xi_y2eta)) #SHOULD THIS BE SQRT(ETA)?
#
#
# J = xi_c*(delta==2) +cbind(xi_y1,0)*(delta==0) + cbind(0,xi_y2)*(delta==1)
#
Sigma <- matrix(c(V[t,1],
mean(keeps$rho[,1])*sqrt(prod(V[t,])),
mean(keeps$rho[,3])*mean(keeps$sigma_v[,1])*V[t,1],0,
mean(keeps$rho[,1])*sqrt(prod(V[t,])),V[t,2],0,mean(keeps$rho[,4])*mean(keeps$sigma_v[,2])*V[t,2],
mean(keeps$rho[,3])*mean(keeps$sigma_v[,1])*V[t,1],0,mean(keeps$sigma_v[,1])^2*V[t,1],mean(keeps$rho[,2])*prod(apply(keeps$sigma_v, 2, mean))*sqrt(prod(V[t,])),
0,mean(keeps$rho[,4])*mean(keeps$sigma_v[,2])*V[t,2],mean(keeps$rho[,2])*prod(apply(keeps$sigma_v, 2, mean))*sqrt(prod(V[t,])),mean(keeps$sigma_v[,2])^2*V[t,2]),nrow=4)
set.seed(463468+t)
temp <- rtmvnorm(n = 1,
mean = c(apply(keeps$mu, 2 ,mean) + J[t,],
apply(keeps$theta,2, mean) + apply(keeps$phi, 2, mean)*(V[t,] - apply(keeps$theta, 2, mean))),
sigma = Sigma, lower=c(-Inf,-Inf, 0, 0))
#V[t+1,] <- temp[c(3:4)]
y[t,] <- temp[c(1,2)]
if( t+1 <= T){ x[t+1] <- 0 }
}
QQdat = data.frame(SP=100*(log(S[-1,c( "GSPC.Close") ])-
log(S[-nrow(S),c( "GSPC.Close") ])),
BTC=100*(log(S[-1,c( "BTC-USD.Close") ])-
log(S[-nrow(S),c( "BTC-USD.Close") ])),
y)
p1 <- ggplot() +
geom_point(aes(x=quantile(QQdat$BTC,seq(0.01,0.99,0.01)),y=quantile(QQdat$X1,seq(0.01,0.99,0.01)))) +
geom_abline(slope=1,intercept=0) +
#xlim(c(-15,15)) + ylim(c(-15,15)) +
xlab("Actual Quantiles") + ylab("Simulated Quantiles") + theme_bw() + ggtitle("BTC")
p2 <- ggplot() +
geom_point(aes(x=quantile(QQdat$SP,seq(0.01,0.99,0.01)),y=quantile(QQdat$X2,seq(0.01,0.99,0.01)))) +
geom_abline(slope=1,intercept=0) +
#xlim(c(-15,15)) + ylim(c(-15,15)) +
xlab("Actual Quantiles") + ylab("Simulated Quantiles") + theme_bw() + ggtitle("S&P")
p3 <- grid.arrange(p1,p2, nrow = 1)
return(p3)
}
model <- "MALD"
keeps <- readRDS(paste0("keeps_long/keepsBTCSP_",model , ".rds"))
plot <- get_qq(keeps,model)
ggsave(paste0("QQ_", model, ".pdf"),plot, width = 12, height = 6)
model <- "IND"
keeps <- readRDS(paste0("keeps_long/keepsBTCSP_",model , ".rds"))
plot <- get_qq(keeps,model)
ggsave(paste0("QQ_", model, ".pdf"),plot, width = 12, height = 6)
model <- "MVN"
keeps <- readRDS(paste0("keeps_long/keepsBTCSP_",model , ".rds"))
plot <- get_qq(keeps,model)
ggsave(paste0("QQ_", model, ".pdf"),plot, width = 12, height = 6)
model <- "LD"
keeps <- readRDS(paste0("keeps_long/keepsBTCSP_",model , ".rds"))
plot <- get_qq(keeps,model)
ggsave(paste0("QQ_", model, ".pdf"),plot, width = 12, height = 6)
#FIGURE XXX STOCHASTIC VOLATILITY--------
keeps_v1_long <- keeps_v1 %>%as.data.frame()%>%
mutate(model = model) %>%
melt(id.vars = c("model")) %>%
mutate(Date = rep(Date, each = 4), #change when add more models
series = "BTC")
keeps_v2_long <- keeps_v2 %>%as.data.frame()%>%
mutate(model = model) %>%
melt(id.vars = c("model")) %>%
mutate(Date = rep(Date, each = 4), #change when add more models
series = "S&P")
############################################################
#----LONG TIME SERIES ONLY---------------------------------
############################################################
getSymbols("BTC-USD",from = "2014-09-15",to = "2020-09-30")
BTC <- as.data.frame(`BTC-USD`)
BTC$Date <- seq(as.Date("2014-09-17"),as.Date("2020-09-30"),by="days")
BTC$`BTC-USD.Close`[BTC$Date=="2020-04-17"] <- 7096.18
getSymbols("^GSPC",from = "2014-09-15",to = "2020-09-30")
SP500 <- as.data.frame(`GSPC`)
SP500$Date <- as.Date(rownames(SP500))
S <- merge(BTC,SP500)
T <- nrow(S) - 1
Date <- S$Date
keeps <- readRDS(paste0("keeps_long/keepsBTCSP" ,"_","MALD", ".rds"))
names <- lapply(keeps[c(4,6:17)], domean, total = 10) %>%unlist %>%names
keeps_summary0 <- list()
keeps_v1 <- array(dim = c(4,dim(keeps$v)[2]))
keeps_v2 <- array(dim = c(4,dim(keeps$v)[2]))
keeps_j1 <- array(dim = c(4,dim(keeps$J)[2]))
keeps_j2 <- array(dim = c(4,dim(keeps$J)[2]))
model <- rep(NA, 4)
keeps_delta <- list()
keeps_creds <- list()
rho_probs <- list()
j = 0
for (m in c("MALD", "IND", "MVN", "LD")){# "SVMVN", "SVLD",
j = j + 1
keeps <- readRDS(paste0("keeps_long/keepsBTCSP_",m , ".rds"))
keeps_v1[j,] <- apply(keeps$v[1:20000,,1], 2, function(x){(mean(x))}) #alternative sv
keeps_v2[j,] <- apply(keeps$v[1:20000,,2], 2, function(x){(mean(x))}) #sp sv
keeps_j1[j,] <- apply(keeps$J[1:20000,,1], 2, function(x){(mean(x))}) #alternative sv
keeps_j2[j,] <- apply(keeps$J[1:20000,,2], 2, function(x){(mean(x))}) #sp sv
keeps_delta[[j]] <- keeps$delta %>%melt %>%group_by(Var2) %>%
summarise(prop0 = mean(value == 0),prop1 = mean(value == 1),prop2 = mean(value == 2),prop3 = mean(value == 3)) %>%
ungroup()
temp <- rbind(lapply(keeps[c(4,6:17)], docreds,q=.025, total = 20000) %>%unlist,
lapply(keeps[c(4,6:17)], docreds,q=.975, total = 20000) %>%unlist)%>% t() %>%
as.data.frame %>%
rownames_to_column(var = "parameter")%>%
mutate_if(is.numeric, round, 2)  %>%mutate(parameter = gsub(".2.5%", "", parameter))
keeps_summary0[[j]] <- lapply(keeps[c(4,6:17)], domean, total = 20000) %>%unlist %>%melt()%>%rownames_to_column(var = "parameter")%>%
merge(temp,  by = "parameter" ) %>%
mutate(parameter = paste0("$\\", parameter, "$"),
summary = paste0(round(value,3), ", (", V1, ", ", V2, ")"),
model = m) %>%
dplyr::select(model, parameter, summary)
rho_probs[[j]] <- keeps$rho[,c(3,4)] %>%apply(2, function(x){mean(x > 0)})
model[j] <-m
}
keeps_summary <- do.call(rbind,keeps_summary0) %>% spread(model, summary) %>%
dplyr::select(parameter, IND, LD, MVN, MALD)
do.call(rbind, rho_probs) %>%t() %>%as.data.frame() %>%
dplyr::rename(MALD = V1, IN = V2 , MVN = V3, LD = V4)
#TABLE XXX POSTERIOR MEANS OF PARAMETERS------
keeps_summary%>%
xtable() %>%
print(sanitize.text.function = function(x){x}, type = "latex", include.rownames=FALSE)
#FIGURE XXX STOCHASTIC VOLATILITY--------
keeps_v1_long <- keeps_v1 %>%as.data.frame()%>%
mutate(model = model) %>%
melt(id.vars = c("model")) %>%
mutate(Date = rep(Date, each = 4), #change when add more models
series = "BTC")
keeps_v2_long <- keeps_v2 %>%as.data.frame()%>%
mutate(model = model) %>%
melt(id.vars = c("model")) %>%
mutate(Date = rep(Date, each = 4), #change when add more models
series = "S&P")
rbind(keeps_v1_long,keeps_v2_long) %>%
mutate(Model = factor(model, levels = c("MALD", "IND", "MVN", "LD"), labels = c("SV-MALD", "SV-IND", "SV-MVN", "SV-LD"))) %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = Model)) +
facet_grid(series~., scales = "free_y") +
theme_bw() +
scale_colour_grey() +
labs(x = "Date", y = "Volatility")
ggsave("volatility.pdf", height = 8, width = 10)
tempdat = keeps_v1_long %>% subset(model == "MALD") %>%
merge(data.frame(BTC=100*(log(S[-1,c( "BTC-USD.Close") ])-
log(S[-nrow(S),c( "BTC-USD.Close") ])),Date=Date[-1]) , by = "Date")
p1 <-   ggplot() +
geom_rect(aes(xmin=as.Date("2016-01-01"),
xmax=as.Date("2016-12-31"),
ymin=-Inf,ymax=Inf),alpha=0.2,fill="blue") +
geom_rect(aes(xmin=as.Date("2017-07-01"),
xmax=as.Date("2018-03-31"),
ymin=-Inf,ymax=Inf),alpha=I(0.2),fill="blue") +
geom_rect(aes(xmin=as.Date("2020-02-01"),
xmax=as.Date("2021-01-31"),
ymin=-Inf,ymax=Inf),alpha=0.2,fill="blue")+
geom_line(aes(x = Date, y = BTC), alpha= I(.5), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(x = "")
tempdat= keeps_v2_long %>% subset(model == "MALD") %>%
merge(data.frame(SP=100*(log(S[-1,c( "GSPC.Close") ])-
log(S[-nrow(S),c( "GSPC.Close") ])),Date=Date[-1]) , by = "Date")
p2 <- ggplot() +
geom_rect(aes(xmin=as.Date("2016-01-01"),
xmax=as.Date("2016-12-31"),
ymin=-Inf,ymax=Inf),alpha=0.2,fill="blue") +
geom_rect(aes(xmin=as.Date("2017-07-01"),
xmax=as.Date("2018-03-31"),
ymin=-Inf,ymax=Inf),alpha=I(0.2),fill="blue") +
geom_rect(aes(xmin=as.Date("2020-02-01"),
xmax=as.Date("2021-01-31"),
ymin=-Inf,ymax=Inf),alpha=0.2,fill="blue")+
geom_line(aes(x = Date, y = SP), alpha= I(.5), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw()
p3 <-grid.arrange(p1, p2, nrow = 2)
p3
p1 <-   ggplot() +
geom_line(aes(x = Date, y = BTC), alpha= I(.5), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(x = "")
tempdat = keeps_v1_long %>% subset(model == "MALD") %>%
merge(data.frame(BTC=100*(log(S[-1,c( "BTC-USD.Close") ])-
log(S[-nrow(S),c( "BTC-USD.Close") ])),Date=Date[-1]) , by = "Date")
p1 <-   ggplot() +
geom_line(aes(x = Date, y = BTC), alpha= I(.5), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(x = "")
tempdat= keeps_v2_long %>% subset(model == "MALD") %>%
merge(data.frame(SP=100*(log(S[-1,c( "GSPC.Close") ])-
log(S[-nrow(S),c( "GSPC.Close") ])),Date=Date[-1]) , by = "Date")
p2 <- ggplot() +
geom_line(aes(x = Date, y = SP), alpha= I(.5), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw()
p3 <-grid.arrange(p1, p2, nrow = 2)
p2 <- ggplot() +
geom_line(aes(x = Date, y = SP), alpha= I(.5), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(y = "S&P")
tempdat = keeps_v1_long %>% subset(model == "MALD") %>%
merge(data.frame(BTC=100*(log(S[-1,c( "BTC-USD.Close") ])-
log(S[-nrow(S),c( "BTC-USD.Close") ])),Date=Date[-1]) , by = "Date")
p1 <-   ggplot() +
geom_line(aes(x = Date, y = BTC), alpha= I(.5), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(x = "")
tempdat= keeps_v2_long %>% subset(model == "MALD") %>%
merge(data.frame(SP=100*(log(S[-1,c( "GSPC.Close") ])-
log(S[-nrow(S),c( "GSPC.Close") ])),Date=Date[-1]) , by = "Date")
p2 <- ggplot() +
geom_line(aes(x = Date, y = SP), alpha= I(.5), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(y = "S&P")
p3 <-grid.arrange(p1, p2, nrow = 2)
p3
tempdat = keeps_v1_long %>% subset(model == "MALD") %>%
merge(data.frame(BTC=100*(log(S[-1,c( "BTC-USD.Close") ])-
log(S[-nrow(S),c( "BTC-USD.Close") ])),Date=Date[-1]) , by = "Date")
p1 <-   ggplot() +
geom_line(aes(x = Date, y = BTC), alpha= I(.4), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(x = "")
tempdat= keeps_v2_long %>% subset(model == "MALD") %>%
merge(data.frame(SP=100*(log(S[-1,c( "GSPC.Close") ])-
log(S[-nrow(S),c( "GSPC.Close") ])),Date=Date[-1]) , by = "Date")
p2 <- ggplot() +
geom_line(aes(x = Date, y = SP), alpha= I(.4), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(y = "S&P")
p3 <-grid.arrange(p1, p2, nrow = 2)
p3
ggsave("leverage.pdf",p3, height = 8, width = 10)
ggsave("leverage.pdf",p3, height = 10, width = 14)
tempdat = keeps_v1_long %>% subset(model == "MALD") %>%
merge(data.frame(BTC=100*(log(S[-1,c( "BTC-USD.Close") ])-
log(S[-nrow(S),c( "BTC-USD.Close") ])),Date=Date[-1]) , by = "Date")
p1 <-   ggplot() +
geom_line(aes(x = Date, y = BTC), alpha= I(.4), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(x = "")+ theme(text = element_text(size = 20))
tempdat= keeps_v2_long %>% subset(model == "MALD") %>%
merge(data.frame(SP=100*(log(S[-1,c( "GSPC.Close") ])-
log(S[-nrow(S),c( "GSPC.Close") ])),Date=Date[-1]) , by = "Date")
p2 <- ggplot() +
geom_line(aes(x = Date, y = SP), alpha= I(.4), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(y = "S&P")+ theme(text = element_text(size = 20))
p3 <-grid.arrange(p1, p2, nrow = 2)
p3
ggsave("leverage.pdf",p3, height = 10, width = 14)
#FIGURE XXX STOCHASTIC VOLATILITY--------
keeps_v1_long <- keeps_v1 %>%as.data.frame()%>%
mutate(model = model) %>%
melt(id.vars = c("model")) %>%
mutate(Date = rep(Date, each = 4), #change when add more models
series = "BTC")
keeps_v2_long <- keeps_v2 %>%as.data.frame()%>%
mutate(model = model) %>%
melt(id.vars = c("model")) %>%
mutate(Date = rep(Date, each = 4), #change when add more models
series = "S&P")
rbind(keeps_v1_long,keeps_v2_long) %>%
mutate(Model = factor(model, levels = c("MALD", "IND", "MVN", "LD"), labels = c("SV-MALD", "SV-IND", "SV-MVN", "SV-LD"))) %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = Model)) +
facet_grid(series~., scales = "free_y") +
theme_bw() +
scale_colour_grey() +
labs(x = "Date", y = "Volatility")+ theme(text = element_text(size = 20))
ggsave("volatility.pdf", height = 8, width = 10)
keeps_delta[[1]] %>%
mutate(Date = Date[-1]) %>%
dplyr::select(-c(Var2))%>%
melt(id.vars = c("Date")) %>%
mutate(Jump_Type = factor(variable, levels = c("prop0", "prop1", "prop2", "prop3"),
labels = c("BTC only", "S&P only", "Both", "None"))) %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = Jump_Type)) +
facet_wrap(~Jump_Type) +
theme_bw() +
labs(y = "Posterior Probability")+
theme(legend.position = "none")+ theme(text = element_text(size = 20))
ggsave("jump_type_SVMALD.pdf", height = 10, width = 10)
keeps_delta[[2]] %>%
mutate(Date = Date[-1]) %>%
dplyr::select(-c(Var2))%>%
melt(id.vars = c("Date")) %>%
mutate(Jump_Type = factor(variable, levels = c("prop0", "prop1", "prop2", "prop3"),
labels = c("BTC only", "S&P only", "Both", "None"))) %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = Jump_Type)) +
facet_wrap(~Jump_Type) +
theme_bw() +
labs(y = "Posterior Probability")+
theme(legend.position = "none")+ theme(text = element_text(size = 20))
ggsave("jump_type_SVIND.pdf", height = 10, width = 10)
#FIGURE XXX STOCHASTIC VOLATILITY--------
keeps_j1_long <- keeps_j1 %>%as.data.frame()%>%
mutate(model = model) %>%
melt(id.vars = c("model")) %>%
mutate(Date = rep(Date[-1], each = 4), #change when add more models
series = "BTC")
keeps_j2_long <- keeps_j2 %>%as.data.frame()%>%
mutate(model = model) %>%
melt(id.vars = c("model")) %>%
mutate(Date = rep(Date[-1], each = 4), #change when add more models
series = "S&P")
rbind(keeps_j1_long,keeps_j2_long) %>%
mutate(Model = factor(model, levels = c("MALD", "IND", "MVN", "LD"), labels = c("SV-MALD", "SV-IND", "SV-MVN", "SV-LD"))) %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = Model)) +
facet_grid(series~Model, scales = "free_y") +
theme_bw() +
scale_colour_grey() +
labs(x = "Date", y = "Jump size")
rbind(keeps_j1_long,keeps_j2_long) %>%
mutate(Model = factor(model, levels = c("MALD", "IND", "MVN", "LD"), labels = c("SV-MALD", "SV-IND", "SV-MVN", "SV-LD"))) %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = Model)) +
facet_grid(series~Model, scales = "free_y") +
theme_bw() +
scale_colour_grey() +
labs(x = "Date", y = "Jump size")+ theme(text = element_text(size = 20))
ggsave("jump_sizes.pdf", height = 8, width = 14)
rbind(keeps_v1_long,keeps_v2_long) %>%
mutate(Model = factor(model, levels = c("MALD", "IND", "MVN", "LD"), labels = c("SV-MALD", "SV-IND", "SV-MVN", "SV-LD"))) %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = Model)) +
facet_grid(series~., scales = "free_y") +
theme_bw() +
scale_colour_grey() +
labs(x = "Date", y = "Volatility")+ theme(text = element_text(size = 20))
ggsave("volatility.pdf", height = 10, width = 14)
tempdat = keeps_v1_long %>% subset(model == "MALD") %>%
merge(data.frame(BTC=100*(log(S[-1,c( "BTC-USD.Close") ])-
log(S[-nrow(S),c( "BTC-USD.Close") ])),Date=Date[-1]) , by = "Date")
p1 <-   ggplot() +
geom_line(aes(x = Date, y = BTC), alpha= I(.4), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(x = "")+ theme(text = element_text(size = 20))
tempdat= keeps_v2_long %>% subset(model == "MALD") %>%
merge(data.frame(SP=100*(log(S[-1,c( "GSPC.Close") ])-
log(S[-nrow(S),c( "GSPC.Close") ])),Date=Date[-1]) , by = "Date")
p2 <- ggplot() +
geom_line(aes(x = Date, y = SP), alpha= I(.4), data = tempdat) +
geom_line(aes(x = Date, y = value^.5), data = tempdat) +
theme_bw() +labs(y = "S&P")+ theme(text = element_text(size = 20))
p3 <-grid.arrange(p1, p2, nrow = 2)
p3
ggsave("leverage.pdf",p3, height = 10, width = 14)
#FIGURE XXX JUMP SIZES--------
keeps_j1_long <- keeps_j1 %>%as.data.frame()%>%
mutate(model = model) %>%
melt(id.vars = c("model")) %>%
mutate(Date = rep(Date[-1], each = 4), #change when add more models
series = "BTC")
keeps_j2_long <- keeps_j2 %>%as.data.frame()%>%
mutate(model = model) %>%
melt(id.vars = c("model")) %>%
mutate(Date = rep(Date[-1], each = 4), #change when add more models
series = "S&P")
rbind(keeps_j1_long,keeps_j2_long) %>%
mutate(Model = factor(model, levels = c("MALD", "IND", "MVN", "LD"), labels = c("SV-MALD", "SV-IND", "SV-MVN", "SV-LD"))) %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = Model)) +
facet_grid(series~Model, scales = "free_y") +
theme_bw() +
scale_colour_grey() +
labs(x = "Date", y = "Jump size")+ theme(text = element_text(size = 20))
ggsave("jump_sizes.pdf", height = 10, width = 14)
# qqplots-----------
get_qq <- function(keeps, model){## Function to make the QQ Plots
delta <- rep(0,T)
V <- array(0, dim = c(T+1, 2))
J <- y <- x <- array(0, dim = c(T, 2))
#V[1,] <- apply(keeps$v[,1,], 2, mean)
V <- apply(keeps$v, 2:3, mean)
#overwrite J
J <- apply(keeps$J, 2:3, mean)
sim <- 0
for (t in 1:T){
print(t)
set.seed(t + 4922035+ sim)
delta <- sample(c(0:3),prob=apply(keeps$lambda, 2, mean), 1)
set.seed(15866245 + t + sim)
if(model == "MVN"){
B <- 1
}else{
B <- rexp(1)
}
Sigma <- matrix(c(mean(keeps$sigma_c[,1])^2,
mean(keeps$rhoc)*mean(keeps$sigma_c[,1])*mean(keeps$sigma_c[,2]),
mean(keeps$rhoc)*mean(keeps$sigma_c[,1])*mean(keeps$sigma_c[,2]),
mean(keeps$sigma_c[,2]^2)),
nrow=2)
# xi_c <- apply(keeps$xi_cw, 2, mean)*B+
#   sqrt(B)*rtmvnorm(n = 1, mean = c(0,0), sigma = Sigma)
#
# if(model == "MVN"){
#   B <- 1
# }else{
#   B <- rexp(1)
# }
# xi_y1 <- mean(keeps$xi_y1w)*B + sqrt(B)*rnorm(1,0,mean(keeps$xi_y1eta)) #SHOULD THIS BE SQRT(ETA)?
# if(model == "MVN"){
#   B <- 1
# }else{
#   B <- rexp(1)
# }
# xi_y2 <- mean(keeps$xi_y2w)*B + sqrt(B)*rnorm(1,0,mean(keeps$xi_y2eta)) #SHOULD THIS BE SQRT(ETA)?
#
#
# J = xi_c*(delta==2) +cbind(xi_y1,0)*(delta==0) + cbind(0,xi_y2)*(delta==1)
#
Sigma <- matrix(c(V[t,1],
mean(keeps$rho[,1])*sqrt(prod(V[t,])),
mean(keeps$rho[,3])*mean(keeps$sigma_v[,1])*V[t,1],0,
mean(keeps$rho[,1])*sqrt(prod(V[t,])),V[t,2],0,mean(keeps$rho[,4])*mean(keeps$sigma_v[,2])*V[t,2],
mean(keeps$rho[,3])*mean(keeps$sigma_v[,1])*V[t,1],0,mean(keeps$sigma_v[,1])^2*V[t,1],mean(keeps$rho[,2])*prod(apply(keeps$sigma_v, 2, mean))*sqrt(prod(V[t,])),
0,mean(keeps$rho[,4])*mean(keeps$sigma_v[,2])*V[t,2],mean(keeps$rho[,2])*prod(apply(keeps$sigma_v, 2, mean))*sqrt(prod(V[t,])),mean(keeps$sigma_v[,2])^2*V[t,2]),nrow=4)
set.seed(463468+t)
temp <- rtmvnorm(n = 1,
mean = c(apply(keeps$mu, 2 ,mean) + J[t,],
apply(keeps$theta,2, mean) + apply(keeps$phi, 2, mean)*(V[t,] - apply(keeps$theta, 2, mean))),
sigma = Sigma, lower=c(-Inf,-Inf, 0, 0))
#V[t+1,] <- temp[c(3:4)]
y[t,] <- temp[c(1,2)]
if( t+1 <= T){ x[t+1] <- 0 }
}
QQdat = data.frame(SP=100*(log(S[-1,c( "GSPC.Close") ])-
log(S[-nrow(S),c( "GSPC.Close") ])),
BTC=100*(log(S[-1,c( "BTC-USD.Close") ])-
log(S[-nrow(S),c( "BTC-USD.Close") ])),
y)
p1 <- ggplot() +
geom_point(aes(x=quantile(QQdat$BTC,seq(0.01,0.99,0.01)),y=quantile(QQdat$X1,seq(0.01,0.99,0.01)))) +
geom_abline(slope=1,intercept=0) +
#xlim(c(-15,15)) + ylim(c(-15,15)) +
xlab("Actual Quantiles") + ylab("Simulated Quantiles") + theme_bw() + ggtitle(paste0("SV-", model))
p2 <- ggplot() +
geom_point(aes(x=quantile(QQdat$SP,seq(0.01,0.99,0.01)),y=quantile(QQdat$X2,seq(0.01,0.99,0.01)))) +
geom_abline(slope=1,intercept=0) +
#xlim(c(-15,15)) + ylim(c(-15,15)) +
xlab("Actual Quantiles") + ylab("Simulated Quantiles") + theme_bw() + ggtitle("S&P")
p3 <- grid.arrange(p1,p2, nrow = 1)
return(p1)
}
model <- "MALD"
keeps <- readRDS(paste0("keeps_long/keepsBTCSP_",model , ".rds"))
plot1 <- get_qq(keeps,model)
plot5 <- grid.arrange(plot1, plot2, plot3, plot4, nrow = 2)
model <- "IND"
keeps <- readRDS(paste0("keeps_long/keepsBTCSP_",model , ".rds"))
plot2 <- get_qq(keeps,model)
model <- "MVN"
keeps <- readRDS(paste0("keeps_long/keepsBTCSP_",model , ".rds"))
plot3 <- get_qq(keeps,model)
model <- "LD"
keeps <- readRDS(paste0("keeps_long/keepsBTCSP_",model , ".rds"))
plot4 <- get_qq(keeps,model)
plot5 <- grid.arrange(plot1, plot2, plot3, plot4, nrow = 2)
model <- "MVN"
keeps <- readRDS(paste0("keeps_long/keepsBTCSP_",model , ".rds"))
plot3 <- get_qq(keeps,model)
plot5 <- grid.arrange(plot1, plot2, plot3, plot4, nrow = 2)
plot5 <- grid.arrange( plot2, plot4, plot3,plot1, nrow = 2)
ggsave(paste0("QQ_", "all", ".pdf"),plot5, width = 12, height = 12)
ggsave(paste0("QQ_", "all", ".pdf"),plot5, width = 12, height = 12)
plot1 <- plot1 + theme(plot.title = element_text(hjust = 0.5))
plot2 <- plot2 + theme(plot.title = element_text(hjust = 0.5))
plot3 <- plot3 + theme(plot.title = element_text(hjust = 0.5))
plot4 <- plot4 + theme(plot.title = element_text(hjust = 0.5))
plot5 <- grid.arrange(plot2, plot4, plot3,plot1, nrow = 2)
plot1 + theme(plot.title = element_text(size = 16))
plot1 + theme(plot.title = element_text(size = 20))
plot1 <- plot1 + theme(plot.title = element_text(hjust = 0.5,size = 20))
plot2 <- plot2 + theme(plot.title = element_text(hjust = 0.5,size = 20))
plot3 <- plot3 + theme(plot.title = element_text(hjust = 0.5,size = 20))
plot4 <- plot4 + theme(plot.title = element_text(hjust = 0.5,size = 20))
plot5 <- grid.arrange(plot2, plot4, plot3,plot1, nrow = 2)
ggsave(paste0("QQ_", "all", ".pdf"),plot5, width = 12, height = 12)
34000-6000+2000+5300
keeps <- readRDS(file.choose())
plot(keeps$sigma_v[,1])
plot(apply(keeps$v[1:20000,,1], 2, function(x){(mean(x))}))
