return(apply(x[1:R,], 2, ESS))
}else{
return(ESS(x[1:R]))
}
}
############################################################
#----SHORT TIME SERIES ONLY---------------------------------
#ALL CRYPTO, MEME STOCKS
############################################################
#load data
BTC <- read.csv("BTC_USD_2020-07-01_2021-06-30-CoinDesk.csv")
BTC <- BTC %>% dplyr::select(!Currency)
names(BTC) <- c("Date","BTC-USD.Close","BTC-USD.Open","BTC-USD.High","BTC-USD.Low")
BTC$Date <- as.Date(BTC$Date)
getSymbols("GME",from = "2020-10-01",to = "2021-06-30")
GME <- as.data.frame(GME)
GME$Date <- as.Date(rownames(GME))
getSymbols("AMC",from = "2020-10-01",to = "2021-06-30")
AMC <- as.data.frame(AMC)
AMC$Date <- as.Date(rownames(AMC))
# getSymbols("DOGE-USD",from = "2020-10-01",to = "2021-05-31")
# DOGE <- as.data.frame(`DOGE-USD`)
# DOGE$Date <- as.Date(rownames(DOGE))
DOGE <- read.csv("DOGE_USD_2020-07-01_2021-06-30-CoinDesk.csv")
DOGE <- DOGE %>% dplyr::select(!Currency)
DOGE$Date <- as.Date(DOGE$Date)
names(DOGE) <- c("Date","DOGE-USD.Close","DOGE-USD.Open","DOGE-USD.High","DOGE-USD.Low")
getSymbols("^GSPC",from = "2020-10-01",to = "2021-06-30")
SP500 <- as.data.frame(`GSPC`)
SP500$Date <- as.Date(rownames(SP500))
S <- BTC %>% merge(GME) %>% merge(AMC) %>% merge(DOGE) %>% merge(SP500)
T <- nrow(S) - 1
Date <- S$Date
keeps <- readRDS(paste0("keeps_","SVMALD" ,"_","BTC", ".rds"))
names <- lapply(keeps[c(4,6:17)], domean, total = 10) %>%unlist %>%names
keeps_creds <- list()
prob_rho_1 <- NULL
prob_rho_2 <- NULL
for (i in c("BTC", "DOGE", "AMC", "GME")){
if (i == "BTC"){
RawData <- rep(S[,c("BTC-USD.Close")],each=4)
} else if (i == "DOGE"){
RawData <- rep(S[,c("DOGE-USD.Close")],each=4)
} else if (i == "AMC"){
RawData <- rep(S[,c("AMC.Close")],each=4)
} else {
RawData <- rep(S[,c("GME.Close")],each=4)
}
RawData <- as.data.frame(RawData)
names(RawData) <- "Price"
RawData$Date <- rep(Date,each=4)
j = 0
keeps_summary <- array(dim = c(4, length(names)))
keeps_v1 <- array(dim = c(4,dim(keeps$v)[2]))
keeps_v2 <- array(dim = c(4,dim(keeps$v)[2]))
model <- rep(NA, 4)
data <- rep(i, 4)
colnames(keeps_summary) <- names
for (m in c("SVIND", "SVLD", "SVMVN", "SVMALD")){
j = j + 1
keeps <- readRDS(paste0("keeps_",m ,"_",i, ".rds"))
keeps_summary[j,] <- lapply(keeps[c(4,6:17)], domean, total = 20000) %>%unlist
keeps_creds[[j]] <- rbind(lapply(keeps[c(4,6:17)], docreds, q=.025, total = 20000) %>%unlist,
lapply(keeps[c(4,6:17)], docreds, q=.975, total = 20000) %>%unlist)%>% t() %>%
as.data.frame %>%
rownames_to_column(var = "parameter")%>%
mutate_if(is.numeric, round, 3)
keeps_v1[j,] <- apply(keeps$v[1:20000,,1], 2, function(x){(mean(x))}) #alternative sv
keeps_v2[j,] <- apply(keeps$v[1:20000,,2], 2, function(x){(mean(x))}) #sp sv
model[j] <- m
keeps_summary[j,] <- paste0(round(as.numeric(keeps_summary[j,]),2)," (",keeps_creds[[j]][,2],",",keeps_creds[[j]][,3],")")
prob_rho_1 <- c(prob_rho_1,length(which(keeps$rho[,3] > 0))/20000)
prob_rho_2 <- c(prob_rho_2,length(which(keeps$rho[,4] > 0))/20000)
if (m == "SVMALD"){
lapply(keeps[c(4,6:17)], doESS, total = 20000) %>% str()
plot(keeps$xi_y1w,type="l")
pdf(file=paste0("Convergence Check Plots/xi_y1w_",i,".pdf"))
plot(keeps$xi_y2w,type="l")
pdf(file=paste0("Convergence Check Plots/xi_y2w_",i,".pdf"))
plot(keeps$xi_y1eta,type="l")
pdf(file=paste0("Convergence Check Plots/xi_y1eta_",i,".pdf"))
plot(keeps$xi_y2eta,type="l")
pdf(file=paste0("Convergence Check Plots/xi_y2eta_",i,".pdf"))
plot(keeps$xi_cw[,1],type="l")
pdf(file=paste0("Convergence Check Plots/xi_cw1_",i,".pdf"))
plot(keeps$xi_cw[,2],type="l")
pdf(file=paste0("Convergence Check Plots/xi_cw2_",i,".pdf"))
plot(keeps$sigma_c[,1],type="l")
pdf(file=paste0("Convergence Check Plots/sigma_c1_",i,".pdf"))
plot(keeps$sigma_c[,2],type="l")
pdf(file=paste0("Convergence Check Plots/sigma_c2_",i,".pdf"))
}
}
RawData$model = rep(model,T+1)
keeps_summary <- keeps_summary %>% as.data.frame()%>%
#mutate_all(round, digits = 2) %>%
#mutate(lambda = paste0("(",lambda1,", ", lambda2,", ", lambda3,", ", lambda4,")"))%>%
#dplyr::select(-c(lambda1, lambda2, lambda3, lambda4)) %>%
mutate(model = model) %>%t()
#TABLE XXX POSTERIOR MEANS OF PARAMETERS------
keeps_summary%>%
xtable() %>%
print()
#
#FIGURE XXX STOCHASTIC VOLATILITY--------
#ALTERNATIVE CURRENCY
keeps_v1_long <- keeps_v1 %>% as.data.frame()%>%
mutate(model = model,
series = data) %>%
melt(id.vars = c("model", "series")) %>%
mutate(Date = rep(Date, each = 4)) #CHECK THIS STRUCTURE
#S&P
keeps_v2_long <- keeps_v2 %>%as.data.frame()%>%
mutate(model = model,
series = data) %>%
melt(id.vars = c("model", "series")) %>%
mutate(Date = rep(Date, each = 4), #CHECK THIS STRUCTURE
series = "S&P")
#not sure the best way to display this, may need to modify
g1 <- ggplot() +
geom_line(data = RawData,aes(x=Date,y=Price,linetype=model)) +
xlab("") + ylab("Price") + theme_bw()
g2 <- keeps_v1_long %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = model)) +
#facet_grid(series~model., scales = "free_y") +
ylab("Volatility") +
theme_bw() +
scale_colour_grey()
G1 <- ggplotGrob(g1)
G2 <- ggplotGrob(g2)
plotname <- paste0(i,"_Short_Vol.pdf")
ggsave(plotname,grid.draw(rbind(G1,G2)))
}
rm(list = ls())
library(ald)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(truncnorm)
library(mvtnorm)
library(tmvtnorm)
library(Rcpp)
library(MCMCpack)
library(quantmod)
library(RcppTN)
library(xtable)
library(tibble)#rownames_to_column()
library(tidyr)
domean<- function(x, total){
R <- total
if(length(dim(x)) == 2){ #if it's a data frame
return(apply(x[1:R,], 2, median))
}else if (length(dim(x)) > 2){
return(apply(x[1:R,,], 2:3, function(x){(median(x))}))
}else{
return(median(x[1:R]))
}
}
docreds <- function(x, total,q){
R <- total
if(length(dim(x)) == 2){ #if it's a data frame
return(apply(x[1:R,], 2, quantile, q))
#}#else if (length(dim(x)) > 2){
#return(apply(x[1:R,,], 2:3, function(x){(median(x))}))
}else{
return(quantile(x[1:R],q))
}
}
library(LaplacesDemon)
total <- 20000 #number of mcmc iterations saved after burn-in, thinning
doESS <- function(x, total){
R <- total
if(!is.null(dim(x))){ #if it's a data frame
return(apply(x[1:R,], 2, ESS))
}else{
return(ESS(x[1:R]))
}
}
############################################################
#----SHORT TIME SERIES ONLY---------------------------------
#ALL CRYPTO, MEME STOCKS
############################################################
#load data
BTC <- read.csv("BTC_USD_2020-07-01_2021-06-30-CoinDesk.csv")
BTC <- BTC %>% dplyr::select(!Currency)
names(BTC) <- c("Date","BTC-USD.Close","BTC-USD.Open","BTC-USD.High","BTC-USD.Low")
BTC$Date <- as.Date(BTC$Date)
getSymbols("GME",from = "2020-10-01",to = "2021-06-30")
GME <- as.data.frame(GME)
GME$Date <- as.Date(rownames(GME))
getSymbols("AMC",from = "2020-10-01",to = "2021-06-30")
AMC <- as.data.frame(AMC)
AMC$Date <- as.Date(rownames(AMC))
# getSymbols("DOGE-USD",from = "2020-10-01",to = "2021-05-31")
# DOGE <- as.data.frame(`DOGE-USD`)
# DOGE$Date <- as.Date(rownames(DOGE))
DOGE <- read.csv("DOGE_USD_2020-07-01_2021-06-30-CoinDesk.csv")
DOGE <- DOGE %>% dplyr::select(!Currency)
DOGE$Date <- as.Date(DOGE$Date)
names(DOGE) <- c("Date","DOGE-USD.Close","DOGE-USD.Open","DOGE-USD.High","DOGE-USD.Low")
getSymbols("^GSPC",from = "2020-10-01",to = "2021-06-30")
SP500 <- as.data.frame(`GSPC`)
SP500$Date <- as.Date(rownames(SP500))
S <- BTC %>% merge(GME) %>% merge(AMC) %>% merge(DOGE) %>% merge(SP500)
T <- nrow(S) - 1
Date <- S$Date
keeps <- readRDS(paste0("keeps_","SVMALD" ,"_","BTC", ".rds"))
names <- lapply(keeps[c(4,6:17)], domean, total = 10) %>%unlist %>%names
keeps_creds <- list()
prob_rho_1 <- NULL
prob_rho_2 <- NULL
for (i in c("BTC", "DOGE", "AMC", "GME")){
if (i == "BTC"){
RawData <- rep(S[,c("BTC-USD.Close")],each=4)
} else if (i == "DOGE"){
RawData <- rep(S[,c("DOGE-USD.Close")],each=4)
} else if (i == "AMC"){
RawData <- rep(S[,c("AMC.Close")],each=4)
} else {
RawData <- rep(S[,c("GME.Close")],each=4)
}
RawData <- as.data.frame(RawData)
names(RawData) <- "Price"
RawData$Date <- rep(Date,each=4)
j = 0
keeps_summary <- array(dim = c(4, length(names)))
keeps_v1 <- array(dim = c(4,dim(keeps$v)[2]))
keeps_v2 <- array(dim = c(4,dim(keeps$v)[2]))
model <- rep(NA, 4)
data <- rep(i, 4)
colnames(keeps_summary) <- names
for (m in c("SVIND", "SVLD", "SVMVN", "SVMALD")){
j = j + 1
keeps <- readRDS(paste0("keeps_",m ,"_",i, ".rds"))
keeps_summary[j,] <- lapply(keeps[c(4,6:17)], domean, total = 20000) %>%unlist
keeps_creds[[j]] <- rbind(lapply(keeps[c(4,6:17)], docreds, q=.025, total = 20000) %>%unlist,
lapply(keeps[c(4,6:17)], docreds, q=.975, total = 20000) %>%unlist)%>% t() %>%
as.data.frame %>%
rownames_to_column(var = "parameter")%>%
mutate_if(is.numeric, round, 3)
keeps_v1[j,] <- apply(keeps$v[1:20000,,1], 2, function(x){(mean(x))}) #alternative sv
keeps_v2[j,] <- apply(keeps$v[1:20000,,2], 2, function(x){(mean(x))}) #sp sv
model[j] <- m
keeps_summary[j,] <- paste0(round(as.numeric(keeps_summary[j,]),2)," (",keeps_creds[[j]][,2],",",keeps_creds[[j]][,3],")")
prob_rho_1 <- c(prob_rho_1,length(which(keeps$rho[,3] > 0))/20000)
prob_rho_2 <- c(prob_rho_2,length(which(keeps$rho[,4] > 0))/20000)
if (m == "SVMALD"){
lapply(keeps[c(4,6:17)], doESS, total = 20000) %>% str()
pdf(file=paste0("Convergence Check Plots/xi_y1w_",i,".pdf"))
plot(keeps$xi_y1w,type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/xi_y2w_",i,".pdf"))
plot(keeps$xi_y2w,type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/xi_y1eta_",i,".pdf"))
plot(keeps$xi_y1eta,type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/xi_y2eta_",i,".pdf"))
plot(keeps$xi_y2eta,type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/xi_cw1_",i,".pdf"))
plot(keeps$xi_cw[,1],type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/xi_cw2_",i,".pdf"))
plot(keeps$xi_cw[,2],type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/sigma_c1_",i,".pdf"))
plot(keeps$sigma_c[,1],type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/sigma_c2_",i,".pdf"))
plot(keeps$sigma_c[,2],type="l")
dev.off()
}
}
RawData$model = rep(model,T+1)
keeps_summary <- keeps_summary %>% as.data.frame()%>%
#mutate_all(round, digits = 2) %>%
#mutate(lambda = paste0("(",lambda1,", ", lambda2,", ", lambda3,", ", lambda4,")"))%>%
#dplyr::select(-c(lambda1, lambda2, lambda3, lambda4)) %>%
mutate(model = model) %>%t()
#TABLE XXX POSTERIOR MEANS OF PARAMETERS------
keeps_summary%>%
xtable() %>%
print()
#
#FIGURE XXX STOCHASTIC VOLATILITY--------
#ALTERNATIVE CURRENCY
keeps_v1_long <- keeps_v1 %>% as.data.frame()%>%
mutate(model = model,
series = data) %>%
melt(id.vars = c("model", "series")) %>%
mutate(Date = rep(Date, each = 4)) #CHECK THIS STRUCTURE
#S&P
keeps_v2_long <- keeps_v2 %>%as.data.frame()%>%
mutate(model = model,
series = data) %>%
melt(id.vars = c("model", "series")) %>%
mutate(Date = rep(Date, each = 4), #CHECK THIS STRUCTURE
series = "S&P")
#not sure the best way to display this, may need to modify
g1 <- ggplot() +
geom_line(data = RawData,aes(x=Date,y=Price,linetype=model)) +
xlab("") + ylab("Price") + theme_bw()
g2 <- keeps_v1_long %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = model)) +
#facet_grid(series~model., scales = "free_y") +
ylab("Volatility") +
theme_bw() +
scale_colour_grey()
G1 <- ggplotGrob(g1)
G2 <- ggplotGrob(g2)
plotname <- paste0(i,"_Short_Vol.pdf")
ggsave(plotname,grid.draw(rbind(G1,G2)))
}
rm(list = ls())
library(ald)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(truncnorm)
library(mvtnorm)
library(tmvtnorm)
library(Rcpp)
library(MCMCpack)
library(quantmod)
library(RcppTN)
library(xtable)
library(tibble)#rownames_to_column()
library(tidyr)
domean<- function(x, total){
R <- total
if(length(dim(x)) == 2){ #if it's a data frame
return(apply(x[1:R,], 2, median))
}else if (length(dim(x)) > 2){
return(apply(x[1:R,,], 2:3, function(x){(median(x))}))
}else{
return(median(x[1:R]))
}
}
docreds <- function(x, total,q){
R <- total
if(length(dim(x)) == 2){ #if it's a data frame
return(apply(x[1:R,], 2, quantile, q))
#}#else if (length(dim(x)) > 2){
#return(apply(x[1:R,,], 2:3, function(x){(median(x))}))
}else{
return(quantile(x[1:R],q))
}
}
library(LaplacesDemon)
total <- 20000 #number of mcmc iterations saved after burn-in, thinning
doESS <- function(x, total){
R <- total
if(!is.null(dim(x))){ #if it's a data frame
return(apply(x[1:R,], 2, ESS))
}else{
return(ESS(x[1:R]))
}
}
############################################################
#----SHORT TIME SERIES ONLY---------------------------------
#ALL CRYPTO, MEME STOCKS
############################################################
#load data
BTC <- read.csv("BTC_USD_2020-07-01_2021-06-30-CoinDesk.csv")
BTC <- BTC %>% dplyr::select(!Currency)
names(BTC) <- c("Date","BTC-USD.Close","BTC-USD.Open","BTC-USD.High","BTC-USD.Low")
BTC$Date <- as.Date(BTC$Date)
getSymbols("GME",from = "2020-10-01",to = "2021-06-30")
GME <- as.data.frame(GME)
GME$Date <- as.Date(rownames(GME))
getSymbols("AMC",from = "2020-10-01",to = "2021-06-30")
AMC <- as.data.frame(AMC)
AMC$Date <- as.Date(rownames(AMC))
# getSymbols("DOGE-USD",from = "2020-10-01",to = "2021-05-31")
# DOGE <- as.data.frame(`DOGE-USD`)
# DOGE$Date <- as.Date(rownames(DOGE))
DOGE <- read.csv("DOGE_USD_2020-07-01_2021-06-30-CoinDesk.csv")
DOGE <- DOGE %>% dplyr::select(!Currency)
DOGE$Date <- as.Date(DOGE$Date)
names(DOGE) <- c("Date","DOGE-USD.Close","DOGE-USD.Open","DOGE-USD.High","DOGE-USD.Low")
getSymbols("^GSPC",from = "2020-10-01",to = "2021-06-30")
SP500 <- as.data.frame(`GSPC`)
SP500$Date <- as.Date(rownames(SP500))
S <- BTC %>% merge(GME) %>% merge(AMC) %>% merge(DOGE) %>% merge(SP500)
T <- nrow(S) - 1
Date <- S$Date
keeps <- readRDS(paste0("keeps_","SVMALD" ,"_","BTC", ".rds"))
names <- lapply(keeps[c(4,6:17)], domean, total = 10) %>%unlist %>%names
keeps_creds <- list()
prob_rho_1 <- NULL
prob_rho_2 <- NULL
for (i in c("BTC", "DOGE", "AMC", "GME")){
if (i == "BTC"){
RawData <- rep(S[,c("BTC-USD.Close")],each=4)
} else if (i == "DOGE"){
RawData <- rep(S[,c("DOGE-USD.Close")],each=4)
} else if (i == "AMC"){
RawData <- rep(S[,c("AMC.Close")],each=4)
} else {
RawData <- rep(S[,c("GME.Close")],each=4)
}
RawData <- as.data.frame(RawData)
names(RawData) <- "Price"
RawData$Date <- rep(Date,each=4)
j = 0
keeps_summary <- array(dim = c(4, length(names)))
keeps_v1 <- array(dim = c(4,dim(keeps$v)[2]))
keeps_v2 <- array(dim = c(4,dim(keeps$v)[2]))
model <- rep(NA, 4)
data <- rep(i, 4)
colnames(keeps_summary) <- names
for (m in c("SVIND", "SVLD", "SVMVN", "SVMALD")){
j = j + 1
keeps <- readRDS(paste0("keeps_",m ,"_",i, ".rds"))
keeps_summary[j,] <- lapply(keeps[c(4,6:17)], domean, total = 20000) %>%unlist
keeps_creds[[j]] <- rbind(lapply(keeps[c(4,6:17)], docreds, q=.025, total = 20000) %>%unlist,
lapply(keeps[c(4,6:17)], docreds, q=.975, total = 20000) %>%unlist)%>% t() %>%
as.data.frame %>%
rownames_to_column(var = "parameter")%>%
mutate_if(is.numeric, round, 3)
keeps_v1[j,] <- apply(keeps$v[1:20000,,1], 2, function(x){(mean(x))}) #alternative sv
keeps_v2[j,] <- apply(keeps$v[1:20000,,2], 2, function(x){(mean(x))}) #sp sv
model[j] <- m
keeps_summary[j,] <- paste0(round(as.numeric(keeps_summary[j,]),2)," (",keeps_creds[[j]][,2],",",keeps_creds[[j]][,3],")")
prob_rho_1 <- c(prob_rho_1,length(which(keeps$rho[,3] > 0))/20000)
prob_rho_2 <- c(prob_rho_2,length(which(keeps$rho[,4] > 0))/20000)
if (m == "SVMALD"){
lapply(keeps[c(4,6:17)], doESS, total = 20000) %>% str()
pdf(file=paste0("Convergence Check Plots/xi_y1w_",i,".pdf"))
plot(keeps$xi_y1w,type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/xi_y2w_",i,".pdf"))
plot(keeps$xi_y2w,type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/xi_y1eta_",i,".pdf"))
plot(keeps$xi_y1eta,type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/xi_y2eta_",i,".pdf"))
plot(keeps$xi_y2eta,type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/xi_cw1_",i,".pdf"))
plot(keeps$xi_cw[,1],type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/xi_cw2_",i,".pdf"))
plot(keeps$xi_cw[,2],type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/sigma_c1_",i,".pdf"))
plot(keeps$sigma_c[,1],type="l")
dev.off()
pdf(file=paste0("Convergence Check Plots/sigma_c2_",i,".pdf"))
plot(keeps$sigma_c[,2],type="l")
dev.off()
}
}
RawData$model = rep(model,T+1)
keeps_summary <- keeps_summary %>% as.data.frame()%>%
#mutate_all(round, digits = 2) %>%
#mutate(lambda = paste0("(",lambda1,", ", lambda2,", ", lambda3,", ", lambda4,")"))%>%
#dplyr::select(-c(lambda1, lambda2, lambda3, lambda4)) %>%
mutate(model = model) %>%t()
#TABLE XXX POSTERIOR MEANS OF PARAMETERS------
keeps_summary%>%
xtable() %>%
print()
#
#FIGURE XXX STOCHASTIC VOLATILITY--------
#ALTERNATIVE CURRENCY
keeps_v1_long <- keeps_v1 %>% as.data.frame()%>%
mutate(model = model,
series = data) %>%
melt(id.vars = c("model", "series")) %>%
mutate(Date = rep(Date, each = 4)) #CHECK THIS STRUCTURE
#S&P
keeps_v2_long <- keeps_v2 %>%as.data.frame()%>%
mutate(model = model,
series = data) %>%
melt(id.vars = c("model", "series")) %>%
mutate(Date = rep(Date, each = 4), #CHECK THIS STRUCTURE
series = "S&P")
#not sure the best way to display this, may need to modify
g1 <- ggplot() +
geom_line(data = RawData,aes(x=Date,y=Price,linetype=model)) +
xlab("") + ylab("Price") + theme_bw()
g2 <- keeps_v1_long %>%
ggplot() +
geom_line(aes(x = Date, y = value, linetype = model)) +
#facet_grid(series~model., scales = "free_y") +
ylab("Volatility") +
theme_bw() +
scale_colour_grey()
G1 <- ggplotGrob(g1)
G2 <- ggplotGrob(g2)
plotname <- paste0(i,"_Short_Vol.pdf")
ggsave(plotname,grid.draw(rbind(G1,G2)))
}
matrix(prob_rho_1,nrow=4)
rho_1_above_0 <- matrix(prob_rho_1,nrow=4)
row.names(rho_1_above_0) <- c("BTC", "DOGE", "AMC", "GME")
colnames(rho_1_above_0) <- c("SVIND", "SVLD", "SVMVN", "SVMALD")
rho_1_above_0
rownames(rho_1_above_0) <- c("SVIND", "SVLD", "SVMVN", "SVMALD")
colnames(rho_1_above_0) <- c("BTC", "DOGE", "AMC", "GME")
rho_1_above_0
rho_2_above_0 <- matrix(prob_rho_2,nrow=4)
rownames(rho_2_above_0) <- c("SVIND", "SVLD", "SVMVN", "SVMALD")
colnames(rho_2_above_0) <- c("BTC", "DOGE", "AMC", "GME")
rho_2_above_0
